{"version":3,"file":"index.f33c13453c7ff7f86666.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;AClBA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAjDA;AAyDA;;;;;;;;;;;;;;;;;;;AC/EA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/actions.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCar, fetchCar, fetchCars } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { Car, CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\n\nexport const useSaveCar = (form: CarForm | null, carId: string): [boolean] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { postCar, postLoading, postError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n  const [body, setBody] = useState<object | null>(null);\n\n  useEffect(() => {\n    if (form) {\n      const formData = new FormData();\n      formData.append('name', form.name);\n      formData.append('description', form.description);\n      formData.append('priceMin', form.priceMin);\n      formData.append('priceMax', form.priceMax);\n      formData.append('number', form.number);\n      formData.append('thumbnail', form.thumbnail);\n      form.colors.forEach((color) => {\n        formData.append('colors', color);\n      });\n      formData.append('categoryId', form.categoryId);\n      setBody(formData);\n    }\n  }, [form]);\n\n  useEffect(() => {\n    if (body !== null) {\n      if (carId) {\n        console.log('hm');\n      } else {\n        dispatch(createCar(body));\n      }\n    }\n  }, [body]);\n\n  return [postLoading];\n};\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [boolean, number] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carById, carByIdLoading, carByIdError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCar(carId));\n    }\n  }, [carId]);\n\n  useEffect(() => {\n    if (carById) {\n      const car = carById;\n      setValue('name', car.name);\n      setValue('categoryId', car?.categoryId?.id);\n      setValue('description', car.description);\n      setValue('colors', car.colors);\n      setValue('name', car.name);\n      const blob = fetch(car.thumbnail.path)\n        .then((r) => r.blob())\n        .then((imageBlob) => {\n          const carImage = new File([imageBlob], car.thumbnail.originalname);\n          setValue('thumbnail', carImage);\n        });\n    }\n  }, [carById]);\n\n  return [carByIdLoading, carByIdError];\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const requestCars = createAction('Cars is fetching...');\n\nexport const requestCarsSuccess = createAction<object>('Cars has already fetched');\n\nexport const requestCarsError = createAction<number>('Cars fetched with error');\n\nexport const requestCar = createAction('Car is fetching...');\n\nexport const requestCarSuccess = createAction<object>('Car has already fetched');\n\nexport const requestCarError = createAction<number>('Car fetched with error');\n\nexport const postCar = createAction('Car is posting...');\n\nexport const postCarSuccess = createAction<object>('Car has already posted');\n\nexport const postCarError = createAction<number>('Car not posted');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { Car, CarsState } from '../../types/Cars';\nimport {\n  postCar,\n  postCarError,\n  postCarSuccess,\n  requestCar, requestCarError,\n  requestCars,\n  requestCarsError,\n  requestCarsSuccess, requestCarSuccess\n} from './actions';\n\nconst carsReducer = createReducer<CarsState>({\n  cars: null,\n  loading: false,\n  error: null,\n  postCar: null,\n  postLoading: false,\n  postError: null,\n  carById: null,\n  carByIdLoading: false,\n  carByIdError: null,\n}, {\n  [requestCars.type]: (state) => ({\n    ...state,\n    cars: null,\n    loading: true,\n    error: null,\n  }),\n  [requestCarsSuccess.type]: (state, { payload }) => ({\n    ...state,\n    cars: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestCarsError.type]: (state, { payload }) => ({\n    ...state,\n    cars: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestCar.type]: (state) => ({\n    ...state,\n    carById: null,\n    carByIdLoading: true,\n    carByIdError: null,\n  }),\n  [requestCarSuccess.type]: (state, { payload }) => ({\n    ...state,\n    carById: payload,\n    carByIdLoading: false,\n    carByIdError: null,\n  }),\n  [requestCarError.type]: (state, { payload }) => ({\n    ...state,\n    carById: null,\n    carByIdLoading: false,\n    carByIdError: payload,\n  }),\n  [postCar.type]: (state) => ({\n    ...state,\n    postCar: null,\n    postLoading: true,\n    postError: null,\n  }),\n  [postCarSuccess.type]: (state, { payload }) => ({\n    ...state,\n    postCar: payload,\n    postLoading: false,\n    postError: null,\n  }),\n  [postCarError.type]: (state, { payload }) => ({\n    ...state,\n    postCar: null,\n    postLoading: false,\n    postError: payload,\n  }),\n});\n\nexport default carsReducer;\n","import { useNavigate } from 'react-router-dom';\nimport { ThunkResult } from '../../types/thunk';\nimport { postCar, postCarError, postCarSuccess, requestCars, requestCarsError, requestCarsSuccess } from './actions';\nimport { CarsAxiosConfig } from '../../types/Cars';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchCars = (config: CarsAxiosConfig): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCars());\n    const { data } = await services.table.getEntities('car', config);\n    dispatch(requestCarsSuccess(data));\n  } catch (error) {\n    dispatch(requestCarsError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchCar = (id): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCars());\n    const { data } = await services.table.getEntities('car', {}, id);\n    dispatch(requestCarsSuccess(data.data));\n  } catch (error) {\n    dispatch(requestCarsError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createCar = (body): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    const navigate = useNavigate();\n    try {\n      dispatch(postCar());\n      const { data } = await services.table.postEntity('car', body);\n      dispatch(postCarSuccess(data));\n      navigate('/cars');\n    } catch (error) {\n      dispatch(postCarError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n","__webpack_require__.h = () => (\"7e13e5fa829117888cc0\")"],"names":[],"sourceRoot":""}