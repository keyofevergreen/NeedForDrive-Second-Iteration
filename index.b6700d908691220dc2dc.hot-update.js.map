{"version":3,"file":"index.b6700d908691220dc2dc.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AARA;AAPA;AADA;AANA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;AC7FA;AACA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxBA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/OrderStatusEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/helpers/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport { Dispatcher } from '../../../../types/store';\nimport { OrderStatusForm, OrderStatusState } from '../../../../types/OrderStatus';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useOrderStatusById } from './hooks';\nimport { createOrderStatus, deleteOrderStatus, editOrderStatus } from '../../../../store/OrderStatus/thunks';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport styles from '../CarEdit/styles.module.scss';\n\nconst OrderStatusEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const { uploadedOrderStatus, uploadedOrderStatusLoading } = useSelector<{\n    orderStatus: OrderStatusState;\n  }, OrderStatusState>((state) => state.orderStatus);\n  useUploadedEntity(orderStatusId, uploadedOrderStatus, `order-status/${orderStatusId}`);\n  const orderStatusByIdLoading = useOrderStatusById(orderStatusId, setValue);\n\n  const onSubmit = async (data: OrderStatusForm): Promise<void> => {\n    if (orderStatusId) {\n      dispatch(editOrderStatus(data, orderStatusId));\n    } else dispatch(createOrderStatus(data));\n  };\n\n  const onDeleteOrderStatus = (): void => {\n    if (orderStatusId) {\n      dispatch(deleteOrderStatus(orderStatusId));\n      navigate('/order-status');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка статуса заказа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка статуса заказа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <InputsContainer\n            title=\"Настройки статуса заказа\"\n            isCreateTable={!orderStatusId}\n            isSubmitting={uploadedOrderStatusLoading}\n            isLoading={orderStatusByIdLoading}\n            className={styles['car-form-container']}\n            onDelete={onDeleteOrderStatus}\n          >\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Название статуса</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"carName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </InputsContainer>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatusEdit;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { Dispatcher } from '../../../../types/store';\nimport { OrderStatusForm, OrderStatusState } from '../../../../types/OrderStatus';\nimport { fetchOrderStatus } from '../../../../store/OrderStatus/thunks';\nimport { clearUploadedOrderStatusData } from '../../../../store/OrderStatus/actions';\nimport { useNavigate } from 'react-router-dom';\n\nexport const useOrderStatusById = (orderStatusId: string, setValue: UseFormSetValue<OrderStatusForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusById, orderStatusByIdLoading, orderStatusByIdError } = useSelector<{\n    orderStatus: OrderStatusState;\n  }, OrderStatusState>((state) => state.orderStatus);\n\n  const setValuesToForm = async (orderStatus): Promise<void> => {\n    setValue('name', orderStatus.name, { shouldDirty: true });\n    console.log(orderStatus);\n  };\n\n  useEffect(() => {\n    if (orderStatusId) {\n      dispatch(fetchOrderStatus(orderStatusId));\n    }\n  }, [orderStatusId]);\n\n  useEffect(() => {\n    if (orderStatusById && orderStatusId) {\n      setValuesToForm(orderStatusById);\n    }\n  }, [orderStatusById]);\n\n  return orderStatusByIdLoading;\n};\n","import { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Dispatcher } from '../../types/store';\nimport { useEffect } from 'react';\nimport { clearUploadedOrderStatusData } from '../../store/OrderStatus/actions';\n\nexport const useConvertFile = () => {\n  return (file: File): Promise<string | ArrayBuffer> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n};\n\nexport const useUploadedEntity = (entityId: string | null, uploadedEntity: object, path:  string): void => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  useEffect(() => {\n    if (uploadedEntity && !entityId) {\n      navigate(`/edit/${path}`);\n      dispatch(clearUploadedOrderStatusData());\n    }\n  }, [uploadedEntity]);\n};\n","__webpack_require__.h = () => (\"496d93d56c316089e698\")"],"names":[],"sourceRoot":""}