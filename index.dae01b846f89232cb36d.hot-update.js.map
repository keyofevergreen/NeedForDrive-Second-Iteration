{"version":3,"file":"index.dae01b846f89232cb36d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAvDA;AA+DA;;;;;;;;;;;;;;;;;;;ACjFA;AAUA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9DA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/actions.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCar } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { Car, CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\nimport fetchLocalImage from '../../../../utils/helpers/fetchLocalImage';\nimport { clearUploadedCarData } from '../../../../store/Cars/actions';\n\nexport const useSuccessfullySavedCar = (): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const navigate = useNavigate();\n  const { postCar, postLoading, postError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  if (postCar && !postError) {\n    navigate('/cars');\n    dispatch(clearUploadedCarData());\n  }\n\n  return postLoading;\n};\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [Car, boolean] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carById, carByIdLoading, carByIdError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  const setValuesToForm = async (): Promise<void> => {\n    const car = carById;\n    const carImage = await fetchLocalImage(car.thumbnail.path, car.thumbnail.originalname);\n    await setValue('thumbnail', carImage, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('categoryId', car?.categoryId?.id, { shouldDirty: true });\n    setValue('description', car?.description, { shouldDirty: true });\n    setValue('colors', car?.colors, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('number', car?.number?.toUpperCase(), { shouldDirty: true });\n    setValue('priceMin', car.priceMin.toString(), { shouldDirty: true });\n    setValue('priceMax', car.priceMax.toString(), { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCar(carId));\n    }\n  }, [carId]);\n\n  useEffect(() => {\n    if (carById && carId) {\n      setValuesToForm();\n    }\n  }, [carById]);\n\n  return [carById, carByIdLoading];\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const requestCars = createAction('Cars is fetching...');\n\nexport const requestCarsSuccess = createAction<object>('Cars has already fetched');\n\nexport const requestCarsError = createAction<number>('Cars fetched with error');\n\nexport const requestCar = createAction('Car is fetching...');\n\nexport const requestCarSuccess = createAction<object>('Car has already fetched');\n\nexport const requestCarError = createAction<number>('Car fetched with error');\n\nexport const uploadCar = createAction('Car is posting...');\n\nexport const uploadCarSuccess = createAction<object>('Car has already posted');\n\nexport const uploadCarError = createAction<number>('Car not posted');\n\nexport const clearUploadedCarData = createAction('Clear posted car data...');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { CarsState } from '../../types/Cars';\nimport {\n  clearUploadedCarData,\n  requestCar, requestCarError,\n  requestCars,\n  requestCarsError,\n  requestCarsSuccess, requestCarSuccess, uploadCar, uploadCarError, uploadCarSuccess\n} from './actions';\n\nconst carsReducer = createReducer<CarsState>({\n  cars: null,\n  loading: false,\n  error: null,\n  uploadedCar: null,\n  uploadedCarLoading: false,\n  uploadedCarError: null,\n  carById: null,\n  carByIdLoading: false,\n  carByIdError: null,\n}, {\n  [requestCars.type]: (state) => ({\n    ...state,\n    cars: null,\n    loading: true,\n    error: null,\n  }),\n  [requestCarsSuccess.type]: (state, { payload }) => ({\n    ...state,\n    cars: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestCarsError.type]: (state, { payload }) => ({\n    ...state,\n    cars: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestCar.type]: (state) => ({\n    ...state,\n    carById: null,\n    carByIdLoading: true,\n    carByIdError: null,\n  }),\n  [requestCarSuccess.type]: (state, { payload }) => ({\n    ...state,\n    carById: payload,\n    carByIdLoading: false,\n    carByIdError: null,\n  }),\n  [requestCarError.type]: (state, { payload }) => ({\n    ...state,\n    carById: null,\n    carByIdLoading: false,\n    carByIdError: payload,\n  }),\n  [uploadCar.type]: (state) => ({\n    ...state,\n    uploadedCar: null,\n    uploadedCarLoading: true,\n    uploadedCarError: null,\n  }),\n  [uploadCarSuccess.type]: (state, { payload }) => ({\n    ...state,\n    uploadedCar: payload,\n    uploadedCarLoading: false,\n    uploadedCarError: null,\n  }),\n  [uploadCarError.type]: (state, { payload }) => ({\n    ...state,\n    uploadedCar: null,\n    uploadedCarLoading: false,\n    uploadedCarError: payload,\n  }),\n  [clearUploadedCarData.type]: (state, { payload }) => ({\n    ...state,\n    uploadedCar: null,\n    uploadedCarLoading: false,\n    uploadedCarError: null,\n  }),\n});\n\nexport default carsReducer;\n","import { useNavigate } from 'react-router-dom';\nimport { ThunkResult } from '../../types/thunk';\nimport {\n  postCar,\n  postCarError,\n  postCarSuccess, requestCar,\n  requestCarError,\n  requestCars,\n  requestCarsError,\n  requestCarsSuccess, requestCarSuccess, uploadCar, uploadCarError, uploadCarSuccess\n} from './actions';\nimport { CarsAxiosConfig } from '../../types/Cars';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchCars = (config: CarsAxiosConfig): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCars());\n    const { data } = await services.table.getEntities('car', config);\n    dispatch(requestCarsSuccess(data));\n  } catch (error) {\n    dispatch(requestCarsError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchCar = (id): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCar());\n    const { data } = await services.table.getEntities('car', {}, id);\n    dispatch(requestCarSuccess(data.data));\n  } catch (error) {\n    dispatch(requestCarError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createCar = (body): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    try {\n      dispatch(postCar());\n      const { data } = await services.table.postEntity('car', body);\n      await console.log(data);\n      dispatch(postCarSuccess(data));\n    } catch (error) {\n      dispatch(postCarError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n\nexport const editCar = (body): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    try {\n      dispatch(uploadCar());\n      const { data } = await services.table.postEntity('car', body);\n      await console.log(data);\n      dispatch(uploadCarSuccess(data));\n    } catch (error) {\n      dispatch(uploadCarError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n\n","__webpack_require__.h = () => (\"a983f83bb426e15b6340\")"],"names":[],"sourceRoot":""}