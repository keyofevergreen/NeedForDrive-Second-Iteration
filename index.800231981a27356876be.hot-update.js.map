{"version":3,"file":"index.800231981a27356876be.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAPA;AAPA;AADA;AANA;AAwCA;;AAEA;;;;;;;;;;;;;;;;;ACtFA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AC/BA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AA/BA;AAuCA;;;;;;;;;;;;;;;;;ACxDA;AAQA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/BA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CityEdit/CityEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CityEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cities/actions.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cities/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cities/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useCityById } from './hooks';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Dispatcher } from '../../../../types/store';\nimport { useForm } from 'react-hook-form';\nimport { CityForm, PointForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\n\nconst CityEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { cityId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<CityForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const cityUploading = useUploadedEntity(cityId, 'city');\n  const fetchCityLoading = useCityById(cityId, setValue);\n\n  const onSubmit = async (data: PointForm): Promise<void> => {\n    if (cityId) {\n      dispatch(editEntity(data, 'city', cityId, 'Город сохранен'));\n    } else dispatch(createEntity(data, 'city', 'Город создан'));\n  };\n\n  const onDeletePoint = (): void => {\n    if (cityId) {\n      dispatch(deleteEntity('city', cityId, 'Город удален'));\n      navigate('/cities');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка города</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка города\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки города\"\n            isCreateTable={!cityId}\n            isSubmitting={cityUploading}\n            isLoading={fetchCityLoading}\n            onDelete={onDeletePoint}\n          >\n            <Form.Group controlId=\"cityName\">\n              <Form.Label>Название города</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"cityName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CityEdit;\n","import { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { CityForm } from '../../../../types/Edit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatcher } from '../../../../types/store';\nimport { useEffect } from 'react';\nimport { CitiesState } from '../../../../types/Cities';\nimport { fetchCity } from '../../../../store/Cities/thunks';\n\nexport const useCityById = (cityId: string, setValue: UseFormSetValue<CityForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { cityById, cityByIdLoading } = useSelector<{\n    cities: CitiesState;\n  }, CitiesState>((state) => state.cities);\n\n  const setValuesToForm = async (city): Promise<void> => {\n    setValue('name', city.name, { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (cityId) {\n      dispatch(fetchCity(cityId));\n    }\n  }, [cityId]);\n\n  useEffect(() => {\n    if (cityById && cityId) {\n      setValuesToForm(cityById);\n    }\n  }, [cityById]);\n\n  return cityByIdLoading;\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const requestCities = createAction('Cities is fetching...');\n\nexport const requestCitiesSuccess = createAction<object>('Cities has already fetched');\n\nexport const requestCitiesError = createAction<number>('Cities fetched with error');\n\nexport const requestCity = createAction('City is fetching...');\n\nexport const requestCitySuccess = createAction<object>('City has already fetched');\n\nexport const requestCityError = createAction<number>('City fetched with error');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { CitiesState, City } from '../../types/Cities';\nimport {\n  requestCities,\n  requestCitiesError,\n  requestCitiesSuccess,\n  requestCity,\n  requestCityError,\n  requestCitySuccess\n} from './actions';\n\nconst citiesReducer = createReducer<CitiesState>({\n  cities: null,\n  loading: false,\n  error: null,\n  cityById:null,\n  cityByIdLoading: false,\n  cityByIdError:  null,\n}, {\n  [requestCities.type]: (state) => ({\n    ...state,\n    cities: null,\n    loading: true,\n    error: null,\n  }),\n  [requestCitiesSuccess.type]: (state, { payload }) => ({\n    ...state,\n    cities: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestCitiesError.type]: (state, { payload }) => ({\n    ...state,\n    cities: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestCity.type]: (state) => ({\n    ...state,\n    cityById: null,\n    cityByIdLoading: true,\n    cityByIdError: null,\n  }),\n  [requestCitySuccess.type]: (state, { payload }) => ({\n    ...state,\n    cityById: payload,\n    cityByIdLoading: false,\n    cityByIdError: null,\n  }),\n  [requestCityError.type]: (state, { payload }) => ({\n    ...state,\n    cityById: null,\n    cityByIdLoading: false,\n    cityByIdError: payload,\n  }),\n});\n\nexport default citiesReducer;\n","import { ThunkResult } from '../../types/thunk';\nimport {\n  requestCities,\n  requestCitiesError,\n  requestCitiesSuccess,\n  requestCity,\n  requestCityError,\n  requestCitySuccess\n} from './actions';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchCities = (): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCities());\n    const { data } = await services.table.getEntities('city', {});\n    dispatch(requestCitiesSuccess(data.data));\n  } catch (error) {\n    dispatch(requestCitiesError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchCity = (cityId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCity());\n    const { data } = await services.table.getEntities('city', {}, cityId);\n    dispatch(requestCitySuccess(data.data));\n  } catch (error) {\n    dispatch(requestCityError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n","__webpack_require__.h = () => (\"0b5c6d10010c5e27f368\")"],"names":[],"sourceRoot":""}