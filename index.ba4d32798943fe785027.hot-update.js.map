{"version":3,"file":"index.ba4d32798943fe785027.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAXA;AADA;AANA;AAgCA;;AAEA;;;;;;;;;;;;;;;;;AC/DA;AACA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AC/BA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateTypesEdit/RateTypesEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/helpers/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Dispatcher } from '../../../../types/store';\nimport { useForm } from 'react-hook-form';\nimport { OrderStatusForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\n\nconst RateTypesEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateTypeId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const rateTypeUploading = useUploadedEntity(rateTypeId, 'rate-types');\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка типа тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка типа тарифа\">\n        <FormBody title=\"Настройки типа тарифа\">\n          <Form.Group controlId=\"rateTypeName\">\n            <Form.Label>Название типа тарифа</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите название\"\n                aria-describedby=\"rateTypeName\"\n              />\n            </div>\n          </Form.Group>\n          <Form.Group controlId=\"rateTypeName\">\n            <Form.Label>Единица измерения. Например, <strong>7 дней</strong></Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите единицу измерения\"\n                aria-describedby=\"rateTypeName\"\n              />\n            </div>\n          </Form.Group>\n        </FormBody>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateTypesEdit;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { RateForm } from '../../../../types/Edit';\nimport { Dispatcher } from '../../../../types/store';\nimport { RateState } from '../../../../types/Rates';\nimport { fetchRate } from '../../../../store/Rates/thunks';\n\nexport const useRateById = (rateId: string, setValue: UseFormSetValue<RateForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateById, rateByIdLoading } = useSelector<{\n    rates: RateState;\n  }, RateState>((state) => state.rates);\n\n  const setValuesToForm = async (rate): Promise<void> => {\n    setValue('price', rate.price, { shouldDirty: true });\n    setValue('rateTypeId', rate?.rateTypeId.id || 'Выберите тип тарифа', { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (rateId) {\n      dispatch(fetchRate(rateId));\n    }\n  }, [rateId]);\n\n  useEffect(() => {\n    if (rateById && rateId) {\n      setValuesToForm(rateById);\n    }\n  }, [rateById]);\n\n  return rateByIdLoading;\n};\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatcher } from '../../types/store';\nimport { UploadedEntityState } from '../../types/Edit';\nimport { clearUploadedEntityData } from '../../store/Edit/actions';\n\nexport const useConvertFile = () => {\n  return (file: File): Promise<string | ArrayBuffer> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n};\n\nexport const useUploadedEntity = (entityId: string | null, entityRoute: string): boolean => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { uploadedEntity, uploadedEntityLoading } = useSelector<{\n    uploadedEntity: UploadedEntityState;\n  }, UploadedEntityState>((state) => state.uploadedEntity);\n\n  useEffect(() => {\n    if (uploadedEntity?.id && !entityId) {\n      navigate(`/edit/${entityRoute}/${uploadedEntity.id}`);\n      dispatch(clearUploadedEntityData());\n    }\n  }, [uploadedEntity]);\n\n  return uploadedEntityLoading;\n};\n","__webpack_require__.h = () => (\"6ce1fed0f9131f04fcdd\")"],"names":[],"sourceRoot":""}