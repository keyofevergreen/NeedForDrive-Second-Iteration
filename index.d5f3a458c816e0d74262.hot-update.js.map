{"version":3,"file":"index.d5f3a458c816e0d74262.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAeA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AADA;AAFA;AAhBA;AADA;AADA;AANA;AA4CA;;AAEA;;;;;;;;;;;;;;;;;ACjFA;AACA;AAIA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AChCA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CategoryEdit/CategoryEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CategoryEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Dispatcher } from '../../../../types/store';\nimport { useForm } from 'react-hook-form';\nimport { CategoryForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { useCategoryById } from './hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useCategory } from '../../../Categories/hooks';\n\nconst CategoryEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { categoryId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<CategoryForm>({\n    defaultValues: {\n      name: '',\n      description: '',\n    }\n  });\n  const [categories, categoriesLoading] = useCategory();\n  const categoryUploading = useUploadedEntity(categoryId, 'city');\n  const fetchCategoryLoading = useCategoryById(categoryId, setValue);\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка категории</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка категории\">\n        <Form>\n          <FormBody title=\"Настройки категории\">\n            <Form.Group controlId=\"categoryName\">\n              <Form.Label>Название категории</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"categoryName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !categories.find((category) => value.toLowerCase() === category.name.toLowerCase()) || 'Такая категория уже есть в системе'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n            <Form.Group controlId=\"categoryDescription\">\n              <Form.Label>Описание</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.description?.message}>\n                <Form.Control\n                  size=\"sm\"\n                  as=\"textarea\"\n                  rows={4}\n                  aria-describedby=\"categoryDescription\"\n                  {...register('description', {\n                    required: 'Это поле не должно быть пустым',\n                  })}\n                  isInvalid={!!(errors.description)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CategoryEdit;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { Dispatcher } from '../../../../types/store';\nimport { CategoryState } from '../../../../types/Category';\nimport { fetchCategory } from '../../../../store/Category/thunks';\nimport { CategoryForm } from '../../../../types/Edit';\n\nexport const useCategoryById = (categoryId: string, setValue: UseFormSetValue<CategoryForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { categoryById, categoryByIdLoading } = useSelector<{\n    category: CategoryState;\n  }, CategoryState>((state) => state.category);\n\n  const setValuesToForm = async (category): Promise<void> => {\n    setValue('name', category.name, { shouldDirty: true });\n    setValue('description', category.description, { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (categoryId) {\n      dispatch(fetchCategory(categoryId));\n    }\n  }, [categoryId]);\n\n  useEffect(() => {\n    if (categoryById && categoryId) {\n      setValuesToForm(categoryById);\n    }\n  }, [categoryById]);\n\n  return categoryByIdLoading;\n};\n","__webpack_require__.h = () => (\"c0357e919ec4ef37a77e\")"],"names":[],"sourceRoot":""}