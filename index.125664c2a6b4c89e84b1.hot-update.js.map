{"version":3,"file":"index.125664c2a6b4c89e84b1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAJA;AASA;AACA;AACA;AACA;AAJA;AAOA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAFA;AAnBA;AA8BA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AAWA;AACA;AAFA;AAAA;AAXA;AAFA;AAsBA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AAiBA;AACA;AAFA;AAAA;AAjBA;AAFA;AA4BA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAJA;AAAA;AAVA;AAsBA;AACA;AAFA;AAAA;AAtBA;AA+BA;AAAA;AAGA;AACA;AAEA;AACA;AALA;AAFA;AAjCA;AA1DA;AA9BA;AAJA;AANA;AAoJA;;AAEA;;;;;;;;ACnNA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/CarEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { CarEditForm } from '../../../../types/Edit';\nimport { useCategory } from '../../../Categories/hooks';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormContainer from '../../../../components/FormContainer/FormContainer';\nimport MyProgressBar from './components/MyProgressBar';\nimport Car from '../../../../assets/carsDefaultImage.png';\nimport styles from './styles.module.scss';\n\nconst CarEdit = (): React.ReactElement => {\n  const { carId } = useParams();\n  const [colorValue, setColorValue] = useState<string>('');\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [categories, categoriesLoading] = useCategory();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    getFieldState,\n    formState: { errors },\n    formState,\n  } = useForm<CarEditForm>({\n    defaultValues: {\n      car: '',\n      category: 'Выберите категорию',\n      colorsArray: [],\n    }\n  });\n  const { ref } = register('colorsArray', {\n    validate: (value) => value.length > 0 || 'Добавьте хотя бы один цвет',\n  });\n  const currentCar = watch('car');\n  const currentCategory = watch('category');\n  const colorsCheckboxes = watch('colorsArray');\n\n  useEffect(() => {\n    if (categories) {\n      const currCategoryObject = categories.find((category) => category.id === currentCategory);\n      setSelectedCategory(currCategoryObject?.name);\n    }\n  }, [currentCategory]);\n\n  const addColor = (): void => {\n    const currentColors = getValues('colorsArray');\n    setValue('colorsArray', [...currentColors, colorValue], { shouldValidate: true, shouldDirty: true });\n    setColorValue('');\n  };\n\n  const deleteColor = (colorForDelete): void => {\n    const currentColors = getValues('colorsArray');\n    setValue('colorsArray', currentColors.filter((color) => color !== colorForDelete), { shouldDirty: true });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка автомобиля</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Карточка автомобиля\"\n        className={styles['car-edit-container-wrap']}\n      >\n        <div className={styles['car-edit']}>\n          <div className={styles['car-edit__card']}>\n            <img src={imageUrl ? URL.createObjectURL(imageUrl) : Car} alt=\"car-name\" />\n            <div className={styles['car-edit__details']}>\n              <h2>\n                {currentCar}\n              </h2>\n              <span>\n                {selectedCategory && selectedCategory.length > 0 ? selectedCategory : 'Категория не выбрана'}\n              </span>\n            </div>\n            <Form.Control\n              type=\"file\"\n              size=\"sm\"\n              className={styles['car-edit__file-input']}\n              onChange={(e: React.FormEvent<HTMLInputElement>) => setImageUrl(e.target.files[0])}\n            />\n            <MyProgressBar\n              formStates={[getFieldState('car', formState), getFieldState('category', formState), getFieldState('colorsArray', formState)]}\n            />\n            <Form.Group className={styles['car-edit__description-textarea']} controlId=\"carDescription\">\n              <Form.Label>Описание</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={4}\n                aria-describedby=\"carDescription\"\n                defaultValue=\"Lorem ipsum dolor sit amet consectetur adipisicing elit. Odio eaque, quidem, commodi soluta qui quae quod dolorum sint alias, possimus illum assumenda eligendi cumque?\"\n              />\n            </Form.Group>\n          </div>\n          <FormContainer\n            title=\"Настройки автомобиля\"\n            isCreateTable={!carId}\n            className={styles['car-form-container']}\n            onSubmit={handleSubmit((data) => {\n              console.log(data);\n            })}\n          >\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Модель автомобиля</Form.Label>\n              <div className=\"input-wrap\">\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите модель\"\n                  aria-describedby=\"carName\"\n                  {...register('car', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.car)}\n                />\n                {(errors.car?.message) && (\n                  <Form.Text\n                    id=\"username\"\n                    bsPrefix=\"input-message\"\n                  >\n                    {errors.car?.message}\n                  </Form.Text>\n                )}\n              </div>\n            </Form.Group>\n            <Form.Group controlId=\"categoryName\">\n              <Form.Label>Тип автомобиля</Form.Label>\n              <div className=\"input-wrap\">\n                <Form.Select\n                  size=\"sm\"\n                  disabled={categoriesLoading}\n                  aria-describedby=\"pointCity\"\n                  {...register('category', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: value => value !== 'Выберите категорию' || 'Вы не выбрали категорию',\n                  })}\n                  isInvalid={!!(errors.category)}\n                >\n                  <option value=\"Выберите категорию\">Выберите категорию</option>\n                  {categories && categories.map((category) => (\n                    <option key={category.id} value={category.id}>{category.name}</option>\n                  ))}\n                </Form.Select>\n                {(errors.category?.message) && (\n                  <Form.Text\n                    id=\"username\"\n                    bsPrefix=\"input-message\"\n                  >\n                    {errors.category?.message}\n                  </Form.Text>\n                )}\n              </div>\n            </Form.Group>\n            <Form.Group controlId=\"CarColors\">\n              <Form.Label>Доступные цвета</Form.Label>\n              <div className=\"input-wrap\">\n                <InputGroup className={styles['form__colors-input-group']}>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите цвет\"\n                    aria-describedby=\"CarColors\"\n                    value={colorValue}\n                    ref={ref}\n                    onChange={(e) => setColorValue(e.target.value)}\n                    isInvalid={!!(errors.colorsArray)}\n                  />\n                  <Button\n                    variant=\"outline-primary\"\n                    className={styles['form__colors-add-button']}\n                    onClick={addColor}\n                    disabled={colorValue.length === 0}\n                  >\n                    Add Color\n                  </Button>\n                </InputGroup>\n                {/*@ts-ignore*/}\n                {(errors.colorsArray?.message) && (\n                  <Form.Text\n                    id=\"username\"\n                    bsPrefix=\"input-message\"\n                  >\n                    {/*@ts-ignore*/}\n                    {errors.colorsArray?.message}\n                  </Form.Text>\n                )}\n              </div>\n              <div className={styles['form__colors-checkbox']}>\n                {colorsCheckboxes.map((color, index) => (\n                  <Form.Check\n                    type=\"checkbox\"\n                    label={color}\n                    key={`color-${index}`}\n                    onClick={() => deleteColor(color)}\n                    checked\n                  />\n                ))}\n              </div>\n            </Form.Group>\n          </FormContainer>\n        </div>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CarEdit;\n","__webpack_require__.h = () => (\"2026f35ef5f3310ce364\")"],"names":[],"sourceRoot":""}