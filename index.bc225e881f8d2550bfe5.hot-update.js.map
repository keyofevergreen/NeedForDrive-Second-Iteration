{"version":3,"file":"index.bc225e881f8d2550bfe5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClDA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7BA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAZA;;AAeA;;;;;;;;ACvBA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/thunks.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/services/Table/service.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCar, fetchCars } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { CarResponse, CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\n\nexport const useSaveCar = (form: CarForm | null, carId: string): [boolean] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { postCar, postLoading, postError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n  const [body, setBody] = useState<object | null>(null);\n\n  useEffect(() => {\n    if (form) {\n      const formData = new FormData();\n      formData.append('name', form.name);\n      formData.append('description', form.description);\n      formData.append('priceMin', form.priceMin);\n      formData.append('priceMax', form.priceMax);\n      formData.append('number', form.number);\n      formData.append('thumbnail', form.thumbnail[0]);\n      form.colors.forEach((color) => {\n        formData.append('colors', color);\n      });\n      formData.append('categoryId', form.categoryId);\n      setBody(formData);\n    }\n  }, [form]);\n\n  useEffect(() => {\n    if (body !== null) {\n      if (carId) {\n        console.log('hm');\n      } else {\n        dispatch(createCar(body));\n      }\n    }\n  }, [body]);\n\n  return [postLoading];\n};\n\nexport const useCarById = (carId: string): [CarResponse, boolean, number] => {\n  const dispatch = useDispatch<Dispatcher>();\n\n  useEffect(() => {\n      dispatch(fetchCars({}, ))\n  }, [])\n}\n","import { useNavigate } from 'react-router-dom';\nimport { ThunkResult } from '../../types/thunk';\nimport { postCar, postCarError, postCarSuccess, requestCars, requestCarsError, requestCarsSuccess } from './actions';\nimport { CarsAxiosConfig } from '../../types/Cars';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchCars = (config: CarsAxiosConfig, id?: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCars());\n    const { data } = await services.table.getEntities('car', config, id);\n    dispatch(requestCarsSuccess(data));\n  } catch (error) {\n    dispatch(requestCarsError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createCar = (body): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    const navigate = useNavigate();\n    try {\n      dispatch(postCar());\n      const { data } = await services.table.postEntity('car', body);\n      dispatch(postCarSuccess(data));\n      navigate('/cars');\n    } catch (error) {\n      dispatch(postCarError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n","import { AxiosResponse } from 'axios';\nimport instance from '../../../http';\n\nexport interface TableInterface {\n  getEntities: (name: string, config: object, id?: string) => Promise<AxiosResponse>,\n  postEntity: (name: string, body: object) => Promise<AxiosResponse>,\n}\n\nconst tableService = (): TableInterface => ({\n  getEntities: async (name, config, id): Promise<AxiosResponse> => {\n    const url = id ? `/db/${name}/${id}` : `/db/${name}`;\n    return instance.get(url, config);\n  },\n  postEntity: async (name, body): Promise<AxiosResponse> => {\n    console.log(body);\n    return instance.post(`/db/${name}`, body, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n});\n\nexport default tableService;\n","__webpack_require__.h = () => (\"565356af54bb26059a6f\")"],"names":[],"sourceRoot":""}