{"version":3,"file":"index.2d25cdbb2740d84433fd.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AChGA;AACA;;AACA;AAAA;AAAA;;AACA;;AACA;AAAA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;;;;;;;;;;;;;;ACVA;AACA;AACA;;AACA;;AACA;AACA;;AAEA;;;;;;;;ACPA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/helpers/dateUrlToFile.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/helpers/getBase64.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCar, fetchCar } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\nimport fetchLocalImage from '../../../../utils/helpers/fetchLocalImage';\nimport getBase64 from '../../../../utils/helpers/getBase64';\nimport dataUrlToFile from '../../../../utils/helpers/dateUrlToFile';\n\nconst getForm = async (form: CarForm, setBody: React.Dispatch<React.SetStateAction<object>>): Promise<void> => {\n  const formData = new FormData();\n  formData.append('name', form.name);\n  formData.append('description', form.description);\n  formData.append('priceMin', form.priceMin);\n  formData.append('priceMax', form.priceMax);\n  formData.append('number', form.number);\n  form.colors.forEach((color) => {\n    formData.append('colors', color);\n  });\n  formData.append('categoryId', form.categoryId);\n  const base64Image = await getBase64(form.thumbnail[0], (result) => {\n    formData.append('thumbnail', dataUrlToFile(result, form.thumbnail[0].name));\n    console.log(dataUrlToFile(result, form.thumbnail[0].name));\n  });\n  // await setBody(formData);\n};\n\nexport const useSaveCar = (form: CarForm | null, carId: string): [boolean] => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { postCar, postLoading, postError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n  const [body, setBody] = useState<object | null>(null);\n\n  useEffect(() => {\n    if (form) {\n      getForm(form, setBody);\n    }\n  }, [form]);\n\n  useEffect(() => {\n    if (body !== null) {\n      if (carId) {\n        console.log('hm');\n      } else {\n        dispatch(createCar(body));\n      }\n    }\n  }, [body]);\n\n  useEffect(() => {\n    if (postCar) {\n      navigate('/cars');\n    }\n  }, [postCar]);\n\n  return [postLoading];\n};\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [boolean, number] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carById, carByIdLoading, carByIdError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCar(carId));\n    }\n  }, [carId]);\n\n  const setValuesToForm = async (): Promise<void> => {\n    const car = carById;\n    const carImage = await fetchLocalImage(car.thumbnail.path, car.thumbnail.originalname);\n    await setValue('thumbnail', carImage, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('categoryId', car?.categoryId?.id, { shouldDirty: true });\n    setValue('description', car?.description, { shouldDirty: true });\n    setValue('colors', car?.colors, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('number', car?.number?.toUpperCase(), { shouldDirty: true });\n    setValue('priceMin', car.priceMin.toString(), { shouldDirty: true });\n    setValue('priceMax', car.priceMax.toString(), { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (carById && carId) {\n      setValuesToForm();\n    }\n  }, [carById]);\n\n  return [carByIdLoading, carByIdError];\n};\n","const dataUrlToFile = (dataUrl: string, filename: string): File | undefined => {\n  const arr = dataUrl.split(',');\n  if (arr.length < 2) { return undefined; }\n  const mimeArr = arr[0].match(/:(.*?);/);\n  if (!mimeArr || mimeArr.length < 2) { return undefined; }\n  const mime = mimeArr[1];\n  const buff = Buffer.from(arr[1], 'base64');\n  return new File([buff], filename, {type:mime});\n}\n\nexport default dataUrlToFile;\n","const getBase64 = async (file: File, cb): Promise<void> => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = () => cb(reader.result);\n  reader.onerror = (error) => console.log('Error: ', error);\n};\n\nexport default getBase64;\n","__webpack_require__.h = () => (\"d8ac291b7783305e3816\")"],"names":[],"sourceRoot":""}