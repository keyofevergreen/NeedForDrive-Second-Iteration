{"version":3,"file":"index.f6226fc0a4def88aa8fd.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAZA;AA2BA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAIA;AACA;AACA;AAJA;AAQA;AACA;AAAA;AADA;AAVA;AANA;AAFA;AAjCA;AANA;AAyEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;;AAEA;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AANA;AASA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAbA;AAdA;AAkCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;ACpEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AAFA;AAIA;AAAA;AAAA;AAEA;AAFA;AAzCA;AA+CA;;;;;;;;;;;;;;;;;AClEA;AAQA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnCA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Order/Order.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Order/components/OrderItemStatusButtons/OrderItemStatusButtons.tsx","webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/actions.ts","webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useOrder } from './hooks';\nimport { OrderSort } from '../../types/Order';\nimport useResize from '../../hooks/useResize';\nimport ContentContainer from '../../components/ContentContainer/ContentContainer';\nimport OrderItem from './components/OrderItem/OrderItem';\nimport TableFilter from '../../components/TableFilter/TableFilter';\nimport OrderFilters from './components/OrderFilters/OrderFilters';\nimport Spin from '../../components/Spin/Spin';\n\nconst Order: React.FC = () => {\n  const isResponsive = useResize(1, 1440);\n  const [cityFilter, setCityFilter] = useState<string>('Все города');\n  const [dateFilter, setDateFilter] = useState<string>('За все время');\n  const [orderStatusFilter, setOrderStatusFilter] = useState<string>('Все заказы');\n  const [isFullTankFilter, setFullTankFilter] = useState<boolean>(false);\n  const [isNeedChildChairFilter, setNeedChildChairFilter] = useState<boolean>(false);\n  const [isRightWheelFilter, setRightWheelFilter] = useState<boolean>(false);\n  const [page, setPage] = useState<number>(0);\n  const [filters, setFilters] = useState<OrderSort>({\n    cityId: cityFilter,\n    orderStatusId: orderStatusFilter,\n    date: dateFilter,\n    isFullTank: isFullTankFilter,\n    isNeedChildChair: isNeedChildChairFilter,\n    isRightWheel: isRightWheelFilter,\n  });\n  const [orders, ordersLoading] = useOrder(filters, page);\n  const [submitStatusId, setSubmitStatusId] = useState<string | null>(null);\n\n  const submitFilter = (): void => {\n    setFilters({\n      cityId: cityFilter,\n      orderStatusId: orderStatusFilter,\n      date: dateFilter,\n      isFullTank: isFullTankFilter,\n      isNeedChildChair: isNeedChildChairFilter,\n      isRightWheel: isRightWheelFilter,\n    });\n    setPage(0);\n  };\n\n  const resetFilter = (): void => {\n    setFilters({\n      cityId: 'Все города',\n      orderStatusId: 'Все заказы',\n      date: 'За все время',\n      isFullTank: false,\n      isNeedChildChair: false,\n      isRightWheel: false,\n    });\n    setCityFilter('Все города');\n    setOrderStatusFilter('Все заказы');\n    setDateFilter('За все время');\n    setFullTankFilter(false);\n    setNeedChildChairFilter(false);\n    setRightWheelFilter(false);\n    setPage(0);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Список заказов</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Заказы\"\n        page={page}\n        itemCount={orders?.count}\n        onSetPage={setPage}\n      >\n        <TableFilter\n          onSubmitFilter={submitFilter}\n          onResetFilter={resetFilter}\n          isFiltered={\n            filters.cityId !== 'Все города' ||\n            filters.orderStatusId !== 'Все заказы' ||\n            filters.date !== 'За все время' ||\n            filters.isFullTank !== false ||\n            filters.isNeedChildChair !== false ||\n            filters.isRightWheel !== false\n          }\n        >\n          <OrderFilters\n            dateFilter={dateFilter}\n            setDateFilter={setDateFilter}\n            cityFilter={cityFilter}\n            setCityFilter={setCityFilter}\n            orderStatusFilter={orderStatusFilter}\n            setOrderStatusFilter={setOrderStatusFilter}\n            setFullTankFilter={setFullTankFilter}\n            isFullTankFilter={isFullTankFilter}\n            setNeedChildChairFilter={setNeedChildChairFilter}\n            isNeedChildChairFilter={isNeedChildChairFilter}\n            setRightWheelFilter={setRightWheelFilter}\n            isRightWheelFilter={isRightWheelFilter}\n          />\n        </TableFilter>\n        <div className=\"table-container\">\n          {orders && !ordersLoading && (\n            <Table\n              hover\n              borderless\n              responsive={isResponsive}\n              style={{ tableLayout: 'fixed' }}\n            >\n              <tbody>\n                {orders && orders.data.map((order) => (\n                  <OrderItem\n                    key={order.id}\n                    order={order}\n                    filters={filters}\n                    page={page}\n                  />\n                ))}\n                {orders && orders.data.length === 0 && (\n                  <tr>\n                    <td>\n                      По вашему запросу ничего не найдено\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </Table>\n          )}\n          {ordersLoading && (\n            <Spin />\n          )}\n        </div>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default Order;\n","import React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { OrderStatus, OrderStatusState } from '../../../../types/OrderStatus';\nimport CheckMark from '../../../../assets/CheckMark.component.svg';\nimport CloseIcon from '../../../../assets/CloseIcon.component.svg';\nimport { OrderSort } from '../../../../types/Order';\nimport { Dispatcher } from '../../../../types/store';\nimport { editEntity } from '../../../../store/Edit/thunks';\n\nconst cx = classNames;\n\ninterface IOrderItemStatusButtons {\n  currentOrderStatus: OrderStatus,\n  filters: OrderSort,\n  page: number,\n  orderId: string,\n}\n\nconst OrderItemStatusButtons = ({ currentOrderStatus, filters, page, orderId }: IOrderItemStatusButtons): React.ReactElement => {\n  const dispatch = useDispatch<Dispatcher>();\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const { orderStatus, loading } = useSelector<{\n    orderStatus: OrderStatusState;\n  }, OrderStatusState>((state) => state.orderStatus);\n\n  const onSubmitStatus = (): void => {\n    dispatch(editEntity({ }, 'order', orderId, `Заказ №${orderId}, `))\n  };\n\n  return (\n    <ButtonGroup className={cx('order-item-status-edit-btn', { 'edit-mode': editMode })}>\n      {!editMode && currentOrderStatus.name === 'Новые' && (\n        <>\n          <Button size=\"sm\" variant=\"outline-primary\">Подтвердить</Button>\n          <Button size=\"sm\" variant=\"outline-danger\">Отменить</Button>\n        </>\n      )}\n      {!editMode && currentOrderStatus.name !== 'Новые' && (\n        <>\n          <Button size=\"sm\" variant=\"outline-danger\">Отменить</Button>\n          <Button size=\"sm\" variant=\"outline-primary\" onClick={() => setEditMode(true)}>Изменить</Button>\n        </>\n      )}\n      {editMode && currentOrderStatus.name !== 'Новые' && (\n        <>\n          <Form.Select\n            size=\"sm\"\n            disabled={loading}\n            className=\"status-edit-select\"\n          >\n            {orderStatus && orderStatus.map((status) => (\n              <option key={status.id} value={status.id}>{status.name}</option>\n            ))}\n          </Form.Select>\n          <Button size=\"sm\" variant=\"outline-primary\" className=\"submit-btn\">\n            <CheckMark />\n          </Button>\n          <Button size=\"sm\" variant=\"outline-danger\" className=\"cancel-btn\">\n            <CloseIcon />\n          </Button>\n        </>\n      )}\n    </ButtonGroup>\n  );\n};\n\nexport default OrderItemStatusButtons;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const requestOrderStatuses = createAction('Order statuses is fetching...');\n\nexport const requestOrderStatusesSuccess = createAction<object>('Order statuses has already fetched');\n\nexport const requestOrderStatusesError = createAction<number>('Order statuses fetched with error');\n\nexport const requestOrderStatus = createAction('Order status is fetching...');\n\nexport const requestOrderStatusSuccess = createAction<object>('Order status has already fetched');\n\nexport const requestOrderStatusError = createAction<number>('Order status fetched with error');\n\nexport const setSubmittedStatusId = createAction<string>('Submitted status is setting');\n\nexport const setCanceledStatusId = createAction<string>('Canceled status is setting');\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  requestOrderStatus,\n  requestOrderStatusError,\n  requestOrderStatuses,\n  requestOrderStatusesError,\n  requestOrderStatusesSuccess,\n  requestOrderStatusSuccess, setCanceledStatusId, setSubmittedStatusId,\n} from './actions';\nimport { OrderStatusState } from '../../types/OrderStatus';\n\nconst orderStatusReducer = createReducer<OrderStatusState>({\n  orderStatus: null,\n  loading: false,\n  error: null,\n  orderStatusById: null,\n  orderStatusByIdLoading: false,\n  orderStatusByIdError: null,\n  submitStatusId: null,\n  cancelStatusId: null,\n}, {\n  [requestOrderStatuses.type]: (state) => ({\n    ...state,\n    orderStatus: null,\n    loading: true,\n    error: null,\n  }),\n  [requestOrderStatusesSuccess.type]: (state, { payload }) => ({\n    ...state,\n    orderStatus: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestOrderStatusesError.type]: (state, { payload }) => ({\n    ...state,\n    orderStatus: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestOrderStatus.type]: (state) => ({\n    ...state,\n    orderStatusById: null,\n    orderStatusByIdLoading: true,\n    orderStatusByIdError: null,\n  }),\n  [requestOrderStatusSuccess.type]: (state, { payload }) => ({\n    ...state,\n    orderStatusById: payload,\n    orderStatusByIdLoading: false,\n    orderStatusByIdError: null,\n  }),\n  [requestOrderStatusError.type]: (state, { payload }) => ({\n    ...state,\n    orderStatusById: null,\n    orderStatusByIdLoading: false,\n    orderStatusByIdError: payload,\n  }),\n  [setSubmittedStatusId.type]: (state, { payload }) => ({\n    ...state,\n    submitStatusId: payload,\n  }),\n  [setCanceledStatusId.type]: (state, { payload }) => ({\n    ...state,\n    cancelStatusId: payload,\n  }),\n});\n\nexport default orderStatusReducer;\n","import { ThunkResult } from '../../types/thunk';\nimport {\n  requestOrderStatus,\n  requestOrderStatusError,\n  requestOrderStatuses,\n  requestOrderStatusesError,\n  requestOrderStatusesSuccess,\n  requestOrderStatusSuccess, setCanceledStatusId, setSubmittedStatusId,\n} from './actions';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchOrderStatuses = (): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatuses());\n    const { data } = await services.table.getEntities('orderStatus', {});\n    dispatch(requestOrderStatusesSuccess(data.data));\n    const submitStatus = data.data.find((status) => status.name === 'Подтвержденные');\n    const cancelStatus = data.data.find((status) => status.name === 'Отмененные');\n    dispatch(setSubmittedStatusId(submitStatus.id));\n    dispatch(setCanceledStatusId(cancelStatus.id));\n  } catch (error) {\n    dispatch(requestOrderStatusesError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchOrderStatus = (orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatus());\n    const { data } = await services.table.getEntities('orderStatus', {}, orderStatusId);\n    dispatch(requestOrderStatusSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n","__webpack_require__.h = () => (\"53aea499dca54407247d\")"],"names":[],"sourceRoot":""}