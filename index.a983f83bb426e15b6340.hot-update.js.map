{"version":3,"file":"index.a983f83bb426e15b6340.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;AC1DA;AAQA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1DA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;AAaA;;;;;;;;ACtBA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cars/thunks.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/services/Table/service.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCar } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { Car, CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\nimport fetchLocalImage from '../../../../utils/helpers/fetchLocalImage';\nimport { clearUploadedCarData } from '../../../../store/Cars/actions';\n\nexport const useSuccessfullySavedCar = (): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const navigate = useNavigate();\n  const { uploadedCar, uploadedCarLoading, uploadedCarError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  if (uploadedCar && !uploadedCarError) {\n    navigate('/cars');\n    dispatch(clearUploadedCarData());\n  }\n\n  return uploadedCarLoading;\n};\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [Car, boolean] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carById, carByIdLoading, carByIdError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  const setValuesToForm = async (): Promise<void> => {\n    const car = carById;\n    const carImage = await fetchLocalImage(car.thumbnail.path, car.thumbnail.originalname);\n    await setValue('thumbnail', carImage, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('categoryId', car?.categoryId?.id, { shouldDirty: true });\n    setValue('description', car?.description, { shouldDirty: true });\n    setValue('colors', car?.colors, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('number', car?.number?.toUpperCase(), { shouldDirty: true });\n    setValue('priceMin', car.priceMin.toString(), { shouldDirty: true });\n    setValue('priceMax', car.priceMax.toString(), { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCar(carId));\n    }\n  }, [carId]);\n\n  useEffect(() => {\n    if (carById && carId) {\n      setValuesToForm();\n    }\n  }, [carById]);\n\n  return [carById, carByIdLoading];\n};\n","import { ThunkResult } from '../../types/thunk';\nimport {\n  requestCar,\n  requestCarError,\n  requestCars,\n  requestCarsError,\n  requestCarsSuccess, requestCarSuccess, uploadCar, uploadCarError, uploadCarSuccess\n} from './actions';\nimport { CarsAxiosConfig } from '../../types/Cars';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchCars = (config: CarsAxiosConfig): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCars());\n    const { data } = await services.table.getEntities('car', config);\n    dispatch(requestCarsSuccess(data));\n  } catch (error) {\n    dispatch(requestCarsError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchCar = (id): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCar());\n    const { data } = await services.table.getEntities('car', {}, id);\n    dispatch(requestCarSuccess(data.data));\n  } catch (error) {\n    dispatch(requestCarError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createCar = (body): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    try {\n      dispatch(uploadCar());\n      const { data } = await services.table.postEntity('car', body);\n      await console.log(data);\n      dispatch(uploadCarSuccess(data));\n    } catch (error) {\n      dispatch(uploadCarError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n\nexport const editCar = (body): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    try {\n      dispatch(uploadCar());\n      const { data } = await services.table.postEntity('car', body);\n      await console.log(data);\n      dispatch(uploadCarSuccess(data));\n    } catch (error) {\n      dispatch(uploadCarError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n\n","import { AxiosResponse } from 'axios';\nimport instance from '../../../http';\n\nexport interface TableInterface {\n  getEntities: (name: string, config: object, id?: string) => Promise<AxiosResponse>,\n  postEntity: (name: string, body: object) => Promise<AxiosResponse>,\n  putEntity: (name: string, body: object, id: string) => Promise<AxiosResponse>,\n}\n\nconst tableService = (): TableInterface => ({\n  getEntities: async (name, config, id): Promise<AxiosResponse> => {\n    const url = id ? `/db/${name}/${id}` : `/db/${name}`;\n    return instance.get(url, config);\n  },\n  postEntity: async (name, body): Promise<AxiosResponse> => {\n    return instance.post(`/db/${name}`, body);\n  },\n  putEntity: async (name, body, id): Promise<AxiosResponse> => {\n    return instance.put(`/db/${name}/${id}`, body);\n  },\n});\n\nexport default tableService;\n","__webpack_require__.h = () => (\"0494ada30fd433a119cd\")"],"names":[],"sourceRoot":""}