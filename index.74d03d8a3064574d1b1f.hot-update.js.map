{"version":3,"file":"index.74d03d8a3064574d1b1f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AAFA;AAIA;AAAA;AAAA;AAEA;AAFA;AA7BA;AAmCA;;;;;;;;;;;;;;;;;;;;;;ACnDA;AAEA;AAEA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AAFA;AAIA;AAEA;AAFA;AALA;AAWA;;;;;;;;;;;;;;;;;AChBA;AAQA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/BA","sources":["webpack://NeedForDrive-Second-Iteration/./src/store/Edit/actions.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Edit/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/ErrorProvider/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const uploadEntity = createAction('Entity is posting...');\n\nexport const uploadEntitySuccess = createAction<object>('Entity has already posted');\n\nexport const uploadEntityError = createAction<number>('Entity not posted');\n\nexport const clearUploadedEntityData = createAction('Clear uploaded entity response data...');\n\nexport const addSuccessAlertMessage = createAction<string>('Success alert has set');\n\nexport const clearSuccessAlertMessage = createAction('Success alert cleared');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { UploadedEntityState } from '../../types/Edit';\nimport {\n  clearUploadedEntityData,\n  uploadEntity,\n  uploadEntityError,\n  uploadEntitySuccess,\n  addSuccessAlertMessage,\n  clearSuccessAlertMessage\n} from './actions';\n\nconst uploadedEntityReducer = createReducer<UploadedEntityState>({\n  uploadedEntity: null,\n  uploadedEntityLoading: false,\n  uploadedEntityError: null,\n  successAlertMessage: null,\n}, {\n  [uploadEntity.type]: (state) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: true,\n    uploadedEntityError: null,\n  }),\n  [uploadEntitySuccess.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: payload,\n    uploadedEntityLoading: false,\n    uploadedEntityError: null,\n  }),\n  [uploadEntityError.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: false,\n    uploadedEntityError: payload,\n  }),\n  [clearUploadedEntityData.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: false,\n    uploadedEntityError: null,\n  }),\n  [addSuccessAlertMessage.type]: (state, { payload }) => ({\n    ...state,\n    successAlertMessage: payload,\n  }),\n  [clearSuccessAlertMessage.type]: (state, { payload }) => ({\n    ...state,\n    successAlertMessage: null,\n  }),\n});\n\nexport default uploadedEntityReducer;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { ErrorHandlerState } from '../../types/Error';\nimport { addToErrorHandler, resetErrorHandler } from './actions';\n\nconst errorHandlerReducer = createReducer<ErrorHandlerState>({\n  errors: [],\n}, {\n  [addToErrorHandler.type]: (state, { payload }) => ({\n    ...state,\n    errors: [...state.errors, payload],\n  }),\n  [resetErrorHandler.type]: (state) => ({\n    ...state,\n    errors: [],\n  }),\n});\n\nexport default errorHandlerReducer;\n","import { ThunkResult } from '../../types/thunk';\nimport {\n  requestOrderStatus,\n  requestOrderStatusError,\n  requestOrderStatuses,\n  requestOrderStatusesError,\n  requestOrderStatusesSuccess,\n  requestOrderStatusSuccess,\n} from './actions';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchOrderStatuses = (): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatuses());\n    const { data } = await services.table.getEntities('orderStatus', {});\n    dispatch(requestOrderStatusesSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusesError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchOrderStatus = (orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatus());\n    const { data } = await services.table.getEntities('orderStatus', {}, orderStatusId);\n    dispatch(requestOrderStatusSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n","__webpack_require__.h = () => (\"57014f6d4bef89f56d29\")"],"names":[],"sourceRoot":""}