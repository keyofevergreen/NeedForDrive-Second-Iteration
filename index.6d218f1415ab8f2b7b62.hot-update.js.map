{"version":3,"file":"index.6d218f1415ab8f2b7b62.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAjDA;AAyDA;;;;;;;;;;;;;;;;;;;AChFA;AAWA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3DA","sources":["webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport {\n  requestOrderStatus,\n  requestOrderStatusError,\n  requestOrderStatuses,\n  requestOrderStatusesError,\n  requestOrderStatusesSuccess,\n  requestOrderStatusSuccess,\n  uploadOrderStatus,\n  uploadOrderStatusError,\n  uploadOrderStatusSuccess\n} from './actions';\nimport { OrderStatusState } from '../../types/OrderStatus';\n\nconst orderStatusReducer = createReducer<OrderStatusState>({\n  orderStatus: null,\n  loading: false,\n  error: null,\n  orderStatusById: null,\n  orderStatusByIdLoading: false,\n  orderStatusByIdError: null,\n  uploadedOrderStatus: null,\n  uploadedOrderStatusLoading: false,\n  uploadedOrderStatusError: null,\n}, {\n  [requestOrderStatuses.type]: (state) => ({\n    ...state,\n    orderStatus: null,\n    loading: true,\n    error: null,\n  }),\n  [requestOrderStatusesSuccess.type]: (state, { payload }) => ({\n    ...state,\n    orderStatus: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestOrderStatusesError.type]: (state, { payload }) => ({\n    ...state,\n    orderStatus: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestOrderStatus.type]: (state) => ({\n    ...state,\n    orderStatusById: null,\n    orderStatusByIdLoading: true,\n    orderStatusByIdError: null,\n  }),\n  [requestOrderStatusSuccess.type]: (state, { payload }) => ({\n    ...state,\n    orderStatusById: payload,\n    orderStatusByIdLoading: false,\n    orderStatusByIdError: null,\n  }),\n  [requestOrderStatusError.type]: (state, { payload }) => ({\n    ...state,\n    orderStatusById: null,\n    orderStatusByIdLoading: false,\n    orderStatusByIdError: payload,\n  }),\n  [uploadOrderStatus.type]: (state) => ({\n    ...state,\n    uploadedOrderStatus: null,\n    uploadedOrderStatusLoading: true,\n    uploadedOrderStatusError: null,\n  }),\n  [uploadOrderStatusSuccess.type]: (state, { payload }) => ({\n    ...state,\n    uploadedOrderStatus: payload,\n    uploadedOrderStatusLoading: false,\n    uploadedOrderStatusError: null,\n  }),\n  [uploadOrderStatusError.type]: (state, { payload }) => ({\n    ...state,\n    uploadedOrderStatus: null,\n    uploadedOrderStatusLoading: false,\n    uploadedOrderStatusError: payload,\n  }),\n});\n\nexport default orderStatusReducer;\n","import { ThunkResult } from '../../types/thunk';\nimport {\n  requestOrderStatus,\n  requestOrderStatusError,\n  requestOrderStatuses,\n  requestOrderStatusesError,\n  requestOrderStatusesSuccess,\n  requestOrderStatusSuccess,\n  uploadOrderStatus,\n  uploadOrderStatusError,\n  uploadOrderStatusSuccess\n} from './actions';\nimport { addSuccessAlert, addToErrorHandler } from '../ErrorProvider/actions';\nimport { OrderStatusForm } from '../../types/OrderStatus';\n\nexport const fetchOrderStatuses = (): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatuses());\n    const { data } = await services.table.getEntities('orderStatus', {});\n    dispatch(requestOrderStatusesSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusesError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchOrderStatus = (orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatus());\n    const { data } = await services.table.getEntities('orderStatus', {}, orderStatusId);\n    dispatch(requestOrderStatusSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createOrderStatus = (newOrderStatus: OrderStatusForm): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(uploadOrderStatus());\n    const { data } = await services.table.postEntity('orderStatus', newOrderStatus);\n    dispatch(uploadOrderStatusSuccess(data.data));\n    dispatch(addSuccessAlert('Статус заказа создан'));\n  } catch (error) {\n    dispatch(uploadOrderStatusError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const editOrderStatus = (newOrderStatus: OrderStatusForm, orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(uploadOrderStatus());\n    const { data } = await services.table.putEntity('orderStatus', newOrderStatus, orderStatusId);\n    dispatch(uploadOrderStatusSuccess(data.data));\n    dispatch(addSuccessAlert('Статус заказа сохранен'));\n  } catch (error) {\n    dispatch(uploadOrderStatusError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n","__webpack_require__.h = () => (\"a48f721c8a2bbfa957a1\")"],"names":[],"sourceRoot":""}