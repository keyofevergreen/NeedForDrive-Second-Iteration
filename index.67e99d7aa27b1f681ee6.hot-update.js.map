{"version":3,"file":"index.67e99d7aa27b1f681ee6.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;AASA;;;;;;;;ACjBA","sources":["webpack://NeedForDrive-Second-Iteration/./src/store/Cars/thunks.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/services/Table/service.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { ThunkResult } from '../../types/thunk';\nimport { postCar, postCarError, postCarSuccess, requestCars, requestCarsError, requestCarsSuccess } from './actions';\nimport { CarsAxiosConfig } from '../../types/Cars';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchCars = (config: CarsAxiosConfig): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestCars());\n    const { data } = await services.table.getEntities('car', config);\n    dispatch(requestCarsSuccess(data));\n  } catch (error) {\n    dispatch(requestCarsError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createCar = (body): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    try {\n      dispatch(postCar());\n      const { data } = await services.table.postEntity('car',body);\n      dispatch(postCarSuccess(data));\n    } catch (error) {\n      dispatch(postCarError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n","import { AxiosResponse } from 'axios';\nimport instance from '../../../http';\n\nexport interface TableInterface {\n  getEntities: (name: string, config: object) => Promise<AxiosResponse>,\n  postEntity: (name: string, body: object) => Promise<AxiosResponse>,\n}\n\nconst tableService = (): TableInterface => ({\n  getEntities: async (name, config): Promise<AxiosResponse> => {\n    return instance.get(`/db/${name}`, config);\n  },\n  postEntity: async (name, body): Promise<AxiosResponse> => {\n    return instance.post(`/db/${name}`, body);\n  },\n});\n\nexport default tableService;\n","__webpack_require__.h = () => (\"619292b9bdd68e05b02d\")"],"names":[],"sourceRoot":""}