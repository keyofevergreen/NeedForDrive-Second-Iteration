{"version":3,"file":"index.6ce1fed0f9131f04fcdd.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAXA;AADA;AANA;AAgCA;;AAEA;;;;;;;;;;;;;;;;;ACjEA;AACA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;AC/BA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateTypesEdit/RateTypesEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateTypesEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/RateTypes/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Dispatcher } from '../../../../types/store';\nimport { useForm } from 'react-hook-form';\nimport { OrderStatusForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { useRateTypeById } from './hooks';\n\nconst RateTypesEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateTypeId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const rateTypeUploading = useUploadedEntity(rateTypeId, 'rate-types');\n  const fetchRateTypeLoading = useRateTypeById(rateTypeId, setValue);\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка типа тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка типа тарифа\">\n        <FormBody title=\"Настройки типа тарифа\">\n          <Form.Group controlId=\"rateTypeName\">\n            <Form.Label>Название типа тарифа</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите название\"\n                aria-describedby=\"rateTypeName\"\n              />\n            </div>\n          </Form.Group>\n          <Form.Group controlId=\"rateTypeName\">\n            <Form.Label>Единица измерения. Например, <strong>7 дней</strong></Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите единицу измерения\"\n                aria-describedby=\"rateTypeName\"\n              />\n            </div>\n          </Form.Group>\n        </FormBody>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateTypesEdit;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { RateTypeForm } from '../../../../types/Edit';\nimport { Dispatcher } from '../../../../types/store';\nimport { RateTypesState } from '../../../../types/RateTypes';\nimport { fetchRateType } from '../../../../store/RateTypes/thunks';\n\nexport const useRateTypeById = (rateTypeId: string, setValue: UseFormSetValue<RateTypeForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateTypeById, rateTypeByIdLoading } = useSelector<{\n    rateTypes: RateTypesState;\n  }, RateTypesState>((state) => state.rateTypes);\n\n  const setValuesToForm = async (rateType): Promise<void> => {\n    setValue('name', rateType.name, { shouldDirty: true });\n    setValue('unit', rateType?.unit, { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (rateTypeId) {\n      dispatch(fetchRateType(rateTypeId));\n    }\n  }, [rateTypeId]);\n\n  useEffect(() => {\n    if (rateTypeById && rateTypeId) {\n      setValuesToForm(rateTypeById);\n    }\n  }, [rateTypeById]);\n\n  return rateTypeByIdLoading;\n};\n","import { ThunkResult } from '../../types/thunk';\nimport {\n  requestRateType, requestRateTypeError,\n  requestRateTypes,\n  requestRateTypesError,\n  requestRateTypesSuccess,\n  requestRateTypeSuccess\n} from './actions';\nimport { addToErrorHandler } from '../ErrorProvider/actions';\n\nexport const fetchRateTypes = (config: object): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestRateTypes());\n    const { data } = await services.table.getEntities('rateType', config);\n    dispatch(requestRateTypesSuccess(data));\n  } catch (error) {\n    dispatch(requestRateTypesError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchRateType = (rateTypeId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestRateType());\n    const { data } = await services.table.getEntities('rateType', {}, rateTypeId);\n    dispatch(requestRateTypeSuccess(data.data));\n  } catch (error) {\n    dispatch(requestRateTypeError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n","__webpack_require__.h = () => (\"c1fb13731a508594c143\")"],"names":[],"sourceRoot":""}