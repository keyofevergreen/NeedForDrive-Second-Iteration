{"version":3,"file":"index.b7a974ee8683aa71ee8c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAzBA;AADA;AAiCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAeA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAtBA;AAPA;AADA;AANA;AAuDA;;AAEA;;;;;;;;AC1GA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/Edit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateTypesEdit/RateTypesEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CarEdit from './components/CarEdit/CarEdit';\nimport OrderStatusEdit from './components/OrderStatusEdit/OrderStatusEdit';\nimport CategoryEdit from './components/CategoryEdit/CategoryEdit';\nimport PointEdit from './components/PointEdit/PointEdit';\nimport CityEdit from './components/CityEdit/CityEdit';\nimport RateEdit from './components/RateEdit/RateEdit';\nimport RateTypesEdit from './components/RateTypesEdit/RateTypesEdit';\nimport EditRouter from './components/EditRouter/EditRouter';\nimport styles from './styles.module.scss';\n\nconst Edit = (): React.ReactElement => {\n  return (\n    <div className={styles['edit-route']}>\n      <Routes>\n        <Route path=\"car\" element={<EditRouter />}>\n          <Route index element={<CarEdit />} />\n          <Route path=\":carId\" element={<CarEdit />} />\n        </Route>\n        <Route path=\"order-status\" element={<EditRouter />}>\n          <Route index element={<OrderStatusEdit />} />\n          <Route path=\":orderStatusId\" element={<OrderStatusEdit />} />\n        </Route>\n        <Route path=\"category\" element={<EditRouter />}>\n          <Route index element={<CategoryEdit />} />\n          <Route path=\":categoryId\" element={<CategoryEdit />} />\n        </Route>\n        <Route path=\"point\" element={<EditRouter />}>\n          <Route index element={<PointEdit />} />\n          <Route path=\":pointId\" element={<PointEdit />} />\n        </Route>\n        <Route path=\"city\" element={<EditRouter />}>\n          <Route index element={<CityEdit />} />\n          <Route path=\":cityId\" element={<CityEdit />} />\n        </Route>\n        <Route path=\"rate\" element={<EditRouter />}>\n          <Route index element={<RateEdit />} />\n          <Route path=\":rateId\" element={<RateEdit />} />\n        </Route>\n        <Route path=\"rate-type\" element={<EditRouter />}>\n          <Route index element={<RateTypesEdit />} />\n          <Route path=\":rateTypesId\" element={<RateTypesEdit />} />\n        </Route>\n      </Routes>\n    </div>\n  );\n};\n\nexport default Edit;\n","import React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { Dispatcher } from '../../../../types/store';\nimport { RateTypeForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { useRateTypeById } from './hooks';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useRateTypes } from '../../../RateTypes/hooks';\n\nconst RateTypesEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateTypeId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<RateTypeForm>({\n    defaultValues: {\n      name: '',\n      unit: '',\n    }\n  });\n  const [rateTypes] = useRateTypes();\n  const rateTypeUploading = useUploadedEntity(rateTypeId, 'rate-type');\n  const fetchRateTypeLoading = useRateTypeById(rateTypeId, setValue);\n\n  const onSubmit = async (data: RateTypeForm): Promise<void> => {\n    if (rateTypeId) {\n      dispatch(editEntity(data, 'rateType', rateTypeId, 'Тип тарифа сохранен'));\n    } else dispatch(createEntity(data, 'rateType', 'Тип тарифа создан'));\n  };\n\n  const onDeleteRateType = (): void => {\n    if (rateTypeId) {\n      dispatch(deleteEntity('rateType', rateTypeId, 'Тип тарифа удален'));\n      navigate('/rate-types');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка типа тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка типа тарифа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки типа тарифа\"\n            isCreateTable={!rateTypeId}\n            isSubmitting={rateTypeUploading}\n            isLoading={fetchRateTypeLoading}\n            onDelete={onDeleteRateType}\n          >\n            <Form.Group controlId=\"rateTypeName\">\n              <Form.Label>Название типа тарифа</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"rateTypeName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !rateTypes.data.find((rateType) => value.toLowerCase() === rateType.name.toLowerCase()) || 'Такой тип тарифа уже существует',\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n            <Form.Group controlId=\"rateTypeName\">\n              <Form.Label>Единица измерения. Например, <strong>7 дней</strong></Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.unit?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите единицу измерения\"\n                  aria-describedby=\"rateTypeName\"\n                  {...register('unit', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.unit)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateTypesEdit;\n","__webpack_require__.h = () => (\"40dc2360dae5b5abde6c\")"],"names":[],"sourceRoot":""}