{"version":3,"file":"index.40d179f7a9ea2b1a7ec0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAPA;AAPA;AADA;AANA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAPA;AAPA;AADA;AANA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAeA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAtBA;AAPA;AADA;AANA;AAuDA;;AAEA;;;;;;;;AC1GA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CityEdit/CityEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/OrderStatusEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateTypesEdit/RateTypesEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useCityById } from './hooks';\nimport { Dispatcher } from '../../../../types/store';\nimport { CityForm, PointForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\nimport { useCities } from '../../../Cities/hooks';\n\nconst CityEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { cityId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<CityForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const [cities, citiesLoading] = useCities();\n  const cityUploading = useUploadedEntity(cityId, 'city');\n  const fetchCityLoading = useCityById(cityId, setValue);\n\n  const onSubmit = async (data: CityForm): Promise<void> => {\n    if (cityId) {\n      dispatch(editEntity(data, 'city', cityId, 'Город сохранен'));\n    } else dispatch(createEntity(data, 'city', 'Город создан'));\n  };\n\n  const onDeleteCity = (): void => {\n    if (cityId) {\n      dispatch(deleteEntity('city', cityId, 'Город удален'));\n      navigate('/cities');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка города</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка города\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки города\"\n            isCreateTable={!cityId}\n            isSubmitting={cityUploading}\n            isLoading={fetchCityLoading}\n            onDelete={onDeleteCity}\n          >\n            <Form.Group controlId=\"cityName\">\n              <Form.Label>Название города</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"cityName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !cities.find((city) => value.toLowerCase() === city.name.toLowerCase()) || 'Такой город уже существует'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CityEdit;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { Dispatcher } from '../../../../types/store';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useOrderStatusById } from './hooks';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { OrderStatusForm } from '../../../../types/Edit';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\nimport { useOrderStatuses } from '../../../OrderStatus/hooks';\n\nconst OrderStatusEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const [orderStatus] = useOrderStatuses();\n  const orderStatusUploading = useUploadedEntity(orderStatusId, 'order-status');\n  const orderStatusByIdLoading = useOrderStatusById(orderStatusId, setValue);\n\n  const onSubmit = async (data: OrderStatusForm): Promise<void> => {\n    if (orderStatusId) {\n      dispatch(editEntity(data, 'orderStatus', orderStatusId, 'Статус заказа сохранен'));\n    } else dispatch(createEntity(data, 'orderStatus', 'Статус заказа создан'));\n  };\n\n  const onDeleteOrderStatus = (): void => {\n    if (orderStatusId) {\n      dispatch(deleteEntity('orderStatus', orderStatusId, 'Статус заказа удален'));\n      navigate('/order-status');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка статуса заказа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка статуса заказа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки статуса заказа\"\n            isCreateTable={!orderStatusId}\n            isSubmitting={orderStatusUploading}\n            isLoading={orderStatusByIdLoading}\n            onDelete={onDeleteOrderStatus}\n          >\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Название статуса</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"carName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !orderStatus.find((status) => value === status.name),\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatusEdit;\n","import React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { Dispatcher } from '../../../../types/store';\nimport { RateTypeForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { useRateTypeById } from './hooks';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useRateTypes } from '../../../RateTypes/hooks';\n\nconst RateTypesEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateTypeId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<RateTypeForm>({\n    defaultValues: {\n      name: '',\n      unit: '',\n    }\n  });\n  const [rateTypes] = useRateTypes();\n  const rateTypeUploading = useUploadedEntity(rateTypeId, 'rate-types');\n  const fetchRateTypeLoading = useRateTypeById(rateTypeId, setValue);\n\n  const onSubmit = async (data: RateTypeForm): Promise<void> => {\n    if (rateTypeId) {\n      dispatch(editEntity(data, 'rateType', rateTypeId, 'Тип тарифа сохранен'));\n    } else dispatch(createEntity(data, 'rateType', 'Тип тарифа создан'));\n  };\n\n  const onDeleteRateType = (): void => {\n    if (rateTypeId) {\n      dispatch(deleteEntity('rateType', rateTypeId, 'Тип тарифа удален'));\n      navigate('/order-status');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка типа тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка типа тарифа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки типа тарифа\"\n            isCreateTable={!rateTypeId}\n            isSubmitting={rateTypeUploading}\n            isLoading={fetchRateTypeLoading}\n            onDelete={onDeleteRateType}\n          >\n            <Form.Group controlId=\"rateTypeName\">\n              <Form.Label>Название типа тарифа</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"rateTypeName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !rateTypes.data.find((rateType) => value === rateType.name) || 'Такой тип тарифа уже существует',\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n            <Form.Group controlId=\"rateTypeName\">\n              <Form.Label>Единица измерения. Например, <strong>7 дней</strong></Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.unit?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите единицу измерения\"\n                  aria-describedby=\"rateTypeName\"\n                  {...register('unit', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.unit)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateTypesEdit;\n","__webpack_require__.h = () => (\"66b08e848d4e583847b4\")"],"names":[],"sourceRoot":""}