{"version":3,"file":"index.6cb50d5249d9b8fba396.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;ACvFA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCar, fetchCar } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\nimport fetchLocalImage from '../../../../utils/helpers/fetchLocalImage';\n\nexport const useSaveCar = (form: CarForm | null, carId: string): [boolean] => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { postCar, postLoading, postError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n  const [body, setBody] = useState<object | null>(null);\n\n  useEffect(() => {\n    if (form) {\n      const formData = new FormData();\n      formData.append('name', form.name);\n      formData.append('description', form.description);\n      formData.append('priceMin', form.priceMin);\n      formData.append('priceMax', form.priceMax);\n      formData.append('number', form.number);\n      formData.append('thumbnail', form.thumbnail[0]);\n      form.colors.forEach((color) => {\n        formData.append('colors', color);\n      });\n      formData.append('categoryId', form.categoryId);\n      setBody(formData);\n    }\n  }, [form]);\n\n  useEffect(() => {\n    if (body !== null) {\n      if (carId) {\n        console.log('hm');\n      } else {\n        dispatch(createCar(body));\n      }\n    }\n  }, [body]);\n\n  useEffect(() => {\n    if (postCar) {\n      navigate('/cars');\n    }\n  }, [postCar]);\n\n  return [postLoading];\n};\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [boolean, number] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carById, carByIdLoading, carByIdError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCar(carId));\n    }\n  }, [carId]);\n\n  const setValuesToForm = async (): Promise<FileList> => {\n    const car = carById;\n    const carImage = await fetchLocalImage(car.thumbnail.path, car.thumbnail.originalname);\n    setValue('name', car?.name);\n    setValue('categoryId', car?.categoryId?.id);\n    setValue('description', car?.description);\n    setValue('colors', car?.colors);\n    setValue('name', car?.name);\n    setValue('number', car?.number?.toUpperCase());\n    setValue('priceMin', car.priceMin.toString());\n    setValue('priceMax', car.priceMax.toString());\n    await setValue('thumbnail', carImage);\n  }\n\n  useEffect(() => {\n    if (carById && carId) {\n      setValuesToForm();\n    }\n  }, [carById]);\n\n  return [carByIdLoading, carByIdError];\n};\n","__webpack_require__.h = () => (\"ff85eec975211c064ff5\")"],"names":[],"sourceRoot":""}