{"version":3,"file":"index.f5b373730ca4d122511c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAPA;AAPA;AADA;AANA;AAwCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AAFA;AADA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AAFA;AADA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AAFA;AADA;AAnCA;AARA;AADA;AANA;AA2EA;;AAEA;;;;;;;;;;;;;;;;;AC/GA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;ACjCA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/OrderStatusEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/PointEdit/PointEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/PointEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport { Dispatcher } from '../../../../types/store';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useOrderStatusById } from './hooks';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport styles from '../CarEdit/styles.module.scss';\nimport { OrderStatusForm } from '../../../../types/Edit';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\n\nconst OrderStatusEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const orderStatusUploading = useUploadedEntity(orderStatusId, 'order-status');\n  const orderStatusByIdLoading = useOrderStatusById(orderStatusId, setValue);\n\n  const onSubmit = async (data: OrderStatusForm): Promise<void> => {\n    if (orderStatusId) {\n      dispatch(editEntity(data, 'orderStatus', orderStatusId, 'Статус заказа сохранен'));\n    } else dispatch(createEntity(data, 'orderStatus', 'Статус заказа создан'));\n  };\n\n  const onDeleteOrderStatus = (): void => {\n    if (orderStatusId) {\n      dispatch(deleteEntity('orderStatus', orderStatusId, 'Статус заказа удален'));\n      navigate('/order-status');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка статуса заказа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка статуса заказа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <InputsContainer\n            title=\"Настройки статуса заказа\"\n            isCreateTable={!orderStatusId}\n            isSubmitting={orderStatusUploading}\n            isLoading={orderStatusByIdLoading}\n            onDelete={onDeleteOrderStatus}\n          >\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Название статуса</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"carName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </InputsContainer>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatusEdit;\n","import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { useCities } from '../../../Cities/hooks';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport { Dispatcher } from '../../../../types/store';\nimport { PointForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { usePointsById } from './hooks';\n\nconst PointEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { pointId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<PointForm>({\n    defaultValues: {\n      name: '',\n      address: '',\n      cityId: 'Выберите город',\n    }\n  });\n  const [cities, citiesLoading] = useCities();\n  const pointUploading = useUploadedEntity(pointId, 'point');\n  const fetchPointLoading = usePointsById(pointId, setValue);\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка пункта выдачи</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка пункта выдачи\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            console.log(data);\n          })}\n        >\n\n          <InputsContainer\n            title=\"Настройки пункта выдачи\"\n            isCreateTable={!pointId}\n            isSubmitting={pointUploading}\n            isLoading={fetchPointLoading}\n            onDelete={onDeleteCar}\n          >\n            <InputErrorMessageProvider errorMessage={errors.name?.message}>\n              <Form.Group controlId=\"pointName\">\n                <Form.Label>Название</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"pointName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </Form.Group>\n            </InputErrorMessageProvider>\n            <InputErrorMessageProvider errorMessage={errors.address?.message}>\n              <Form.Group controlId=\"pointAddress\">\n                <Form.Label>Адрес</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите адрес\"\n                  aria-describedby=\"pointAddress\"\n                  {...register('address', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.address)}\n                />\n              </Form.Group>\n            </InputErrorMessageProvider>\n            <InputErrorMessageProvider errorMessage={errors.cityId?.message}>\n              <Form.Group controlId=\"pointsCity\">\n                <Form.Label>Город</Form.Label>\n                <Form.Select\n                  size=\"sm\"\n                  disabled={citiesLoading}\n                  aria-describedby=\"pointsCity\"\n                  {...register('cityId', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: value => value !== 'Выберите город' || 'Вы не выбрали город',\n                  })}\n                  isInvalid={!!(errors.cityId)}\n                >\n                  <option value=\"Выберите город\">Выберите город</option>\n                  {cities && cities.map((city) => (\n                    <option key={city.id} value={city.id}>{city.name}</option>\n                  ))}\n                </Form.Select>\n              </Form.Group>\n            </InputErrorMessageProvider>\n          </InputsContainer>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default PointEdit;\n","import { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { PointForm } from '../../../../types/Edit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatcher } from '../../../../types/store';\nimport { useEffect } from 'react';\nimport { fetchOrderStatus } from '../../../../store/OrderStatus/thunks';\nimport { PointsState } from '../../../../types/Points';\n\nexport const usePointsById = (pointId: string, setValue: UseFormSetValue<PointForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { pointById, pointByIdLoading } = useSelector<{\n    points: PointsState;\n  }, PointsState>((state) => state.points);\n\n  const setValuesToForm = async (orderStatus): Promise<void> => {\n    setValue('name', orderStatus.name, { shouldDirty: true });\n    setValue('address', orderStatus.address, { shouldDirty: true });\n    setValue('cityId', orderStatus.cityId.id, { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (pointId) {\n      dispatch(fetchOrderStatus(pointId));\n    }\n  }, [pointId]);\n\n  useEffect(() => {\n    if (pointById && pointId) {\n      setValuesToForm(pointById);\n    }\n  }, [pointById]);\n\n  return pointByIdLoading;\n};\n","__webpack_require__.h = () => (\"30f6d40294e2bd1014a3\")"],"names":[],"sourceRoot":""}