{"version":3,"file":"index.12268111b782b8b9648c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;AAGA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AARA;AAPA;AADA;AANA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;;AC3FA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAnBA;AA2BA;;;;;;;;;;;;;;;;;;;;;AClCA;AAWA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAHA;AAUA;AA1BA;;AA8BA;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AC9BA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/OrderStatusEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/store/Edit/actions.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Edit/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/thunks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/store.ts","webpack://NeedForDrive-Second-Iteration/./src/utils/helpers/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport { Dispatcher } from '../../../../types/store';\nimport { OrderStatusState } from '../../../../types/OrderStatus';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useOrderStatusById } from './hooks';\nimport { createOrderStatus, deleteOrderStatus, editOrderStatus } from '../../../../store/OrderStatus/thunks';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport styles from '../CarEdit/styles.module.scss';\nimport { OrderStatusForm } from '../../../../types/Edit';\n\nconst OrderStatusEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const orderStatusUploading = useUploadedEntity(orderStatusId, 'order-status');\n  const orderStatusByIdLoading = useOrderStatusById(orderStatusId, setValue);\n\n  const onSubmit = async (data: OrderStatusForm): Promise<void> => {\n    if (orderStatusId) {\n      dispatch(editOrderStatus(data, orderStatusId));\n    } else dispatch(createOrderStatus(data));\n  };\n\n  const onDeleteOrderStatus = (): void => {\n    if (orderStatusId) {\n      dispatch(deleteOrderStatus(orderStatusId));\n      navigate('/order-status');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка статуса заказа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка статуса заказа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <InputsContainer\n            title=\"Настройки статуса заказа\"\n            isCreateTable={!orderStatusId}\n            isSubmitting={orderStatusUploading}\n            isLoading={orderStatusByIdLoading}\n            className={styles['car-form-container']}\n            onDelete={onDeleteOrderStatus}\n          >\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Название статуса</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"carName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </InputsContainer>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatusEdit;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const uploadEntity = createAction('Entity is posting...');\n\nexport const uploadEntitySuccess = createAction<object>('Entity has already posted');\n\nexport const uploadEntityError = createAction<number>('Entity not posted');\n\nexport const clearUploadedEntityData = createAction('Clear uploaded entity response data...');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { UploadedEntityState } from '../../types/Edit';\nimport { clearUploadedEntityData, uploadEntity, uploadEntityError, uploadEntitySuccess } from './actions';\n\nconst uploadedEntityReducer = createReducer<UploadedEntityState>({\n  uploadedEntity: null,\n  uploadedEntityLoading: false,\n  uploadedEntityError: null,\n}, {\n  [uploadEntity.type]: (state) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: true,\n    uploadedEntityError: null,\n  }),\n  [uploadEntitySuccess.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: payload,\n    uploadedEntityLoading: false,\n    uploadedEntityError: null,\n  }),\n  [uploadEntityError.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: false,\n    uploadedEntityError: payload,\n  }),\n  [clearUploadedEntityData.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: false,\n    uploadedEntityError: null,\n  }),\n});\n\nexport default uploadedEntityReducer;\n","import { ThunkResult } from '../../types/thunk';\nimport {\n  requestOrderStatus,\n  requestOrderStatusError,\n  requestOrderStatuses,\n  requestOrderStatusesError,\n  requestOrderStatusesSuccess,\n  requestOrderStatusSuccess,\n  uploadOrderStatus,\n  uploadOrderStatusError,\n  uploadOrderStatusSuccess\n} from './actions';\nimport { addSuccessAlert, addToErrorHandler } from '../ErrorProvider/actions';\nimport { OrderStatusForm } from '../../types/OrderStatus';\nimport { uploadEntity, uploadEntityError, uploadEntitySuccess } from '../Edit/actions';\n\nexport const fetchOrderStatuses = (): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatuses());\n    const { data } = await services.table.getEntities('orderStatus', {});\n    dispatch(requestOrderStatusesSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusesError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchOrderStatus = (orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatus());\n    const { data } = await services.table.getEntities('orderStatus', {}, orderStatusId);\n    dispatch(requestOrderStatusSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createOrderStatus = (newOrderStatus: OrderStatusForm): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(uploadEntity());\n    const { data } = await services.table.postEntity('orderStatus', newOrderStatus);\n    dispatch(uploadEntitySuccess(data.data));\n    dispatch(addSuccessAlert('Статус заказа создан'));\n  } catch (error) {\n    dispatch(uploadEntityError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const editOrderStatus = (newOrderStatus: OrderStatusForm, orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(uploadEntity());\n    const { data } = await services.table.putEntity('orderStatus', newOrderStatus, orderStatusId);\n    dispatch(uploadEntitySuccess(data.data));\n    dispatch(addSuccessAlert('Статус заказа сохранен'));\n  } catch (error) {\n    dispatch(uploadEntityError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const deleteOrderStatus = (orderStatusId: string): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    try {\n      dispatch(uploadEntity());\n      const { data } = await services.table.deleteEntity('orderStatus', orderStatusId);\n      dispatch(uploadEntitySuccess(data.data));\n      dispatch(addSuccessAlert('Статус заказа удален'));\n    } catch (error) {\n      dispatch(uploadEntityError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n","import { configureStore, Store } from '@reduxjs/toolkit';\nimport { isDevelopment } from '../utils/environments';\nimport { RootState, StoreProps } from '../types/store';\nimport authReducer from './Auth/reducer';\nimport orderReducer from './Order/reducer';\nimport citiesReducer from './Cities/reducer';\nimport carsReducer from './Cars/reducer';\nimport orderStatusReducer from './OrderStatus/reducer';\nimport rateTypesReducer from './RateTypes/reducer';\nimport pointsReducer from './Points/reducer';\nimport categoryReducer from './Category/reducer';\nimport rateReducer from './Rates/reducer';\nimport searchReducer from './Search/reducer';\nimport errorHandlerReducer from './ErrorProvider/reducer';\nimport uploadedEntityReducer from './Edit/reducer';\n\nconst createStore = ({\n  services,\n  initialState,\n  history,\n}: StoreProps): Store<RootState> => (\n  configureStore({\n    reducer: {\n      auth: authReducer,\n      order: orderReducer,\n      cars: carsReducer,\n      cities: citiesReducer,\n      points: pointsReducer,\n      rates: rateReducer,\n      rateTypes: rateTypesReducer,\n      orderStatus: orderStatusReducer,\n      category: categoryReducer,\n      search: searchReducer,\n      errorHandler: errorHandlerReducer,\n      uploadedEntity: uploadedEntityReducer,\n    },\n    devTools: isDevelopment(),\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n      immutableCheck: true,\n      serializableCheck: false,\n      thunk: {\n        extraArgument: {\n          history,\n          services,\n        },\n      },\n    }),\n    preloadedState: initialState || {},\n  })\n);\n\nexport default createStore;\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatcher } from '../../types/store';\nimport { UploadedEntityState } from '../../types/Edit';\nimport { clearUploadedEntityData } from '../../store/Edit/actions';\n\nexport const useConvertFile = () => {\n  return (file: File): Promise<string | ArrayBuffer> => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n};\n\nexport const useUploadedEntity = (entityId: string | null, path: string): boolean => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { uploadedEntity, uploadedEntityLoading } = useSelector<{\n    uploadedEntity: UploadedEntityState;\n  }, UploadedEntityState>((state) => state.uploadedEntity);\n  useEffect(() => {\n    if (uploadedEntity && !entityId) {\n      navigate(`/edit/${path}/${entityId}`);\n      dispatch(clearUploadedEntityData());\n    }\n  }, [uploadedEntity]);\n\n  return uploadedEntityLoading;\n};\n","__webpack_require__.h = () => (\"7c1dd7eeaf7bc4c0d293\")"],"names":[],"sourceRoot":""}