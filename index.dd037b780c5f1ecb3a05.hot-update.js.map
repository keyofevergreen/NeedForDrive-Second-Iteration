{"version":3,"file":"index.dd037b780c5f1ecb3a05.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;ACjCA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/PointEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { PointForm } from '../../../../types/Edit';\nimport { Dispatcher } from '../../../../types/store';\nimport { fetchOrderStatus } from '../../../../store/OrderStatus/thunks';\nimport { PointsState } from '../../../../types/Points';\n\nexport const usePointsById = (pointId: string, setValue: UseFormSetValue<PointForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { pointById, pointByIdLoading } = useSelector<{\n    points: PointsState;\n  }, PointsState>((state) => state.points);\n\n  const setValuesToForm = async (orderStatus): Promise<void> => {\n    setValue('name', orderStatus.name, { shouldDirty: true });\n    setValue('address', orderStatus.address, { shouldDirty: true });\n    setValue('cityId', orderStatus.cityId.id, { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (pointId) {\n      dispatch(fetchOrderStatus(pointId));\n    }\n  }, [pointId]);\n\n  useEffect(() => {\n    if (pointById && pointId) {\n      setValuesToForm(pointById);\n    }\n  }, [pointById]);\n\n  return pointByIdLoading;\n};\n","__webpack_require__.h = () => (\"b9c05b4824c7540f23a8\")"],"names":[],"sourceRoot":""}