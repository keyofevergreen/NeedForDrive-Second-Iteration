{"version":3,"file":"index.c3db1513cc3c2c78b769.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAJA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AAWA;AACA;AACA;AACA;AAJA;AAAA;AAXA;AATA;AAJA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAzBA;AADA;AAiCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAeA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AADA;AAFA;AAtBA;AAPA;AADA;AANA;AAwDA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAPA;AAPA;AADA;AANA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AADA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AADA;AAFA;AAPA;AAPA;AADA;AANA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AAFA;AADA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AAFA;AADA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AAFA;AADA;AAnCA;AAPA;AADA;AANA;AA0EA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AADA;AAFA;AAoBA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AADA;AAFA;AA3BA;AAPA;AADA;AANA;AA6DA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AADA;AADA;AAKA;AAIA;AACA;AACA;AAJA;AAQA;AACA;AAAA;AADA;AAVA;AAVA;AAHA;AADA;AANA;AA8CA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAZA;AA2BA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAIA;AACA;AACA;AAJA;AAQA;AACA;AAAA;AADA;AAVA;AANA;AAFA;AAjCA;AANA;AAyEA;;AAEA;;;;;;;;;;;;;;;;;;ACzIA;AACA;AACA;AAMA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;;AAIA;AACA;AACA;AAKA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;ACpDA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;AC1CA;AACA;AAIA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnBA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AA/BA;AAuCA;;;;;;;;;;;;;;;;;;;;;;ACzDA;AAEA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AAFA;AAIA;AAEA;AAFA;AA7BA;AAmCA;;;;;;;;;;;;;;;;;;;;;;ACnDA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AA/BA;AAuCA;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAJA;AA/BA;AAuCA;;;;;;;;ACzDA","sources":["webpack://NeedForDrive-Second-Iteration/./src/components/FormBody/FormBody.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/Edit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CategoryEdit/CategoryEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CityEdit/CityEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/OrderStatusEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/PointEdit/PointEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateEdit/RateEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/OrderStatus/OrderStatus.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Order/Order.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Cities/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/pages/Order/hooks.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Cities/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Edit/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/RateTypes/reducer.ts","webpack://NeedForDrive-Second-Iteration/./src/store/Rates/reducer.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport classNames from 'classnames/bind';\nimport styles from './styles.module.scss';\nimport Spin from '../Spin/Spin';\n\nconst cx = classNames.bind(styles);\n\ninterface IFormContainerProps extends React.HTMLProps<HTMLFormElement> {\n  children: React.ReactNode,\n  title: string,\n  className?: string,\n  onDelete?: React.MouseEventHandler,\n  isCreateTable?: boolean,\n  isSubmitting?: boolean,\n  isLoading?: boolean,\n}\n\nconst FormBody = ({ children, title, className, onDelete, isCreateTable, isSubmitting, isLoading }: IFormContainerProps): React.ReactElement => {\n  const navigate = useNavigate();\n  return (\n    <div\n      className={cx('form-container', className)}\n    >\n      {!isLoading && (\n        <>\n          <div>\n            <h3>\n              {title}\n            </h3>\n            <div className={styles['form']}>\n              {children}\n            </div>\n          </div>\n          <div className={styles['form-btn-line']}>\n            <div>\n              <Button variant=\"primary\" size=\"sm\" type=\"submit\" disabled={isSubmitting}>\n                {isCreateTable && (!isSubmitting ? 'Создать' : 'Создаем...')}\n                {!isCreateTable && (!isSubmitting ? 'Сохранить' : 'Сохраняем...')}\n              </Button>\n              <Button variant=\"light\" size=\"sm\" onClick={() => navigate(-1)}>\n                Отменить\n              </Button>\n            </div>\n            {!isCreateTable && (\n              <Button\n                variant=\"danger\"\n                size=\"sm\"\n                disabled={isSubmitting}\n                onClick={onDelete}\n              >\n                Удалить\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n      {isLoading && (\n        <Spin />\n      )}\n    </div>\n  );\n};\n\nexport default FormBody;\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport CarEdit from './components/CarEdit/CarEdit';\nimport OrderStatusEdit from './components/OrderStatusEdit/OrderStatusEdit';\nimport CategoryEdit from './components/CategoryEdit/CategoryEdit';\nimport PointEdit from './components/PointEdit/PointEdit';\nimport CityEdit from './components/CityEdit/CityEdit';\nimport RateEdit from './components/RateEdit/RateEdit';\nimport RateTypesEdit from './components/RateTypesEdit/RateTypesEdit';\nimport EditRouter from './components/EditRouter/EditRouter';\nimport styles from './styles.module.scss';\n\nconst Edit = (): React.ReactElement => {\n  return (\n    <div className={styles['edit-route']}>\n      <Routes>\n        <Route path=\"car\" element={<EditRouter />}>\n          <Route index element={<CarEdit />} />\n          <Route path=\":carId\" element={<CarEdit />} />\n        </Route>\n        <Route path=\"order-status\" element={<EditRouter />}>\n          <Route index element={<OrderStatusEdit />} />\n          <Route path=\":orderStatusId\" element={<OrderStatusEdit />} />\n        </Route>\n        <Route path=\"category\" element={<EditRouter />}>\n          <Route index element={<CategoryEdit />} />\n          <Route path=\":categoryId\" element={<CategoryEdit />} />\n        </Route>\n        <Route path=\"point\" element={<EditRouter />}>\n          <Route index element={<PointEdit />} />\n          <Route path=\":pointId\" element={<PointEdit />} />\n        </Route>\n        <Route path=\"city\" element={<EditRouter />}>\n          <Route index element={<CityEdit />} />\n          <Route path=\":cityId\" element={<CityEdit />} />\n        </Route>\n        <Route path=\"rate\" element={<EditRouter />}>\n          <Route index element={<RateEdit />} />\n          <Route path=\":rateId\" element={<RateEdit />} />\n        </Route>\n        <Route path=\"rate-type\" element={<EditRouter />}>\n          <Route index element={<RateTypesEdit />} />\n          <Route path=\":rateTypeId\" element={<RateTypesEdit />} />\n        </Route>\n      </Routes>\n    </div>\n  );\n};\n\nexport default Edit;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { Dispatcher } from '../../../../types/store';\nimport { CategoryForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { useCategoryById } from './hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useCategory } from '../../../Categories/hooks';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\n\nconst CategoryEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { categoryId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<CategoryForm>({\n    defaultValues: {\n      name: '',\n      description: '',\n    }\n  });\n  const [categories] = useCategory();\n  const categoryUploading = useUploadedEntity(categoryId, 'category');\n  const fetchCategoryLoading = useCategoryById(categoryId, setValue);\n\n  const onSubmit = async (data: CategoryForm): Promise<void> => {\n    if (categoryId) {\n      dispatch(editEntity(data, 'category', categoryId, 'Категория сохранена'));\n    } else dispatch(createEntity(data, 'category', 'Категория создана'));\n  };\n\n  const onDeleteCategory = (): void => {\n    if (categoryId) {\n      dispatch(deleteEntity('category', categoryId, 'Категория удалена'));\n      navigate('/categories');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка категории</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка категории\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки категории\"\n            isCreateTable={!categoryId}\n            isSubmitting={categoryUploading}\n            isLoading={fetchCategoryLoading}\n            onDelete={onDeleteCategory}\n          >\n            <Form.Group controlId=\"categoryName\">\n              <Form.Label>Название категории</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"categoryName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !categories.find((category) => value.toLowerCase() === category.name.toLowerCase()) || 'Такая категория уже существует'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n            <Form.Group controlId=\"categoryDescription\">\n              <Form.Label>Описание</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.description?.message}>\n                <Form.Control\n                  size=\"sm\"\n                  as=\"textarea\"\n                  rows={4}\n                  aria-describedby=\"categoryDescription\"\n                  {...register('description', {\n                    required: 'Это поле не должно быть пустым',\n                  })}\n                  isInvalid={!!(errors.description)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CategoryEdit;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useCityById } from './hooks';\nimport { Dispatcher } from '../../../../types/store';\nimport { CityForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\nimport { useCities } from '../../../Cities/hooks';\n\nconst CityEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { cityId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<CityForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const [cities] = useCities();\n  const cityUploading = useUploadedEntity(cityId, 'city');\n  const fetchCityLoading = useCityById(cityId, setValue);\n\n  const onSubmit = async (data: CityForm): Promise<void> => {\n    if (cityId) {\n      dispatch(editEntity(data, 'city', cityId, 'Город сохранен'));\n    } else dispatch(createEntity(data, 'city', 'Город создан'));\n  };\n\n  const onDeleteCity = (): void => {\n    if (cityId) {\n      dispatch(deleteEntity('city', cityId, 'Город удален'));\n      navigate('/cities');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка города</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка города\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки города\"\n            isCreateTable={!cityId}\n            isSubmitting={cityUploading}\n            isLoading={fetchCityLoading}\n            onDelete={onDeleteCity}\n          >\n            <Form.Group controlId=\"cityName\">\n              <Form.Label>Название города</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"cityName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !cities.find((city) => value.toLowerCase() === city.name.toLowerCase()) || 'Такой город уже существует'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CityEdit;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { Dispatcher } from '../../../../types/store';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { useOrderStatusById } from './hooks';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { OrderStatusForm } from '../../../../types/Edit';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\nimport { useOrderStatuses } from '../../../OrderStatus/hooks';\n\nconst OrderStatusEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n  const [orderStatus] = useOrderStatuses();\n  const orderStatusUploading = useUploadedEntity(orderStatusId, 'order-status');\n  const orderStatusByIdLoading = useOrderStatusById(orderStatusId, setValue);\n\n  const onSubmit = async (data: OrderStatusForm): Promise<void> => {\n    if (orderStatusId) {\n      dispatch(editEntity(data, 'orderStatus', orderStatusId, 'Статус заказа сохранен'));\n    } else dispatch(createEntity(data, 'orderStatus', 'Статус заказа создан'));\n  };\n\n  const onDeleteOrderStatus = (): void => {\n    if (orderStatusId) {\n      dispatch(deleteEntity('orderStatus', orderStatusId, 'Статус заказа удален'));\n      navigate('/order-status');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка статуса заказа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка статуса заказа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки статуса заказа\"\n            isCreateTable={!orderStatusId}\n            isSubmitting={orderStatusUploading}\n            isLoading={orderStatusByIdLoading}\n            onDelete={onDeleteOrderStatus}\n          >\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Название статуса</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"carName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => !orderStatus.find((status) => value.toLowerCase() === status.name.toLowerCase()) || 'Такой статус заказа уже существует',\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatusEdit;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { useCities } from '../../../Cities/hooks';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { Dispatcher } from '../../../../types/store';\nimport { PointForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { usePointsById } from './hooks';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\n\nconst PointEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { pointId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<PointForm>({\n    defaultValues: {\n      name: '',\n      address: '',\n      cityId: 'Выберите город',\n    }\n  });\n  const [cities, citiesLoading] = useCities();\n  const pointUploading = useUploadedEntity(pointId, 'point');\n  const fetchPointLoading = usePointsById(pointId, setValue);\n\n  const onSubmit = async (data: PointForm): Promise<void> => {\n    if (pointId) {\n      dispatch(editEntity(data, 'point', pointId, 'Пункт выдачи сохранен'));\n    } else dispatch(createEntity(data, 'point', 'Пункт выдачи создан'));\n  };\n\n  const onDeletePoint = (): void => {\n    if (pointId) {\n      dispatch(deleteEntity('point', pointId, 'Пункт выдачи удален'));\n      navigate('/points');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка пункта выдачи</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка пункта выдачи\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки пункта выдачи\"\n            isCreateTable={!pointId}\n            isSubmitting={pointUploading}\n            isLoading={fetchPointLoading}\n            onDelete={onDeletePoint}\n          >\n            <InputErrorMessageProvider errorMessage={errors.name?.message}>\n              <Form.Group controlId=\"pointName\">\n                <Form.Label>Название</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"pointName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </Form.Group>\n            </InputErrorMessageProvider>\n            <InputErrorMessageProvider errorMessage={errors.address?.message}>\n              <Form.Group controlId=\"pointAddress\">\n                <Form.Label>Адрес</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите адрес\"\n                  aria-describedby=\"pointAddress\"\n                  {...register('address', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.address)}\n                />\n              </Form.Group>\n            </InputErrorMessageProvider>\n            <InputErrorMessageProvider errorMessage={errors.cityId?.message}>\n              <Form.Group controlId=\"pointsCity\">\n                <Form.Label>Город</Form.Label>\n                <Form.Select\n                  size=\"sm\"\n                  disabled={citiesLoading}\n                  aria-describedby=\"pointsCity\"\n                  {...register('cityId', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: value => value !== 'Выберите город' || 'Вы не выбрали город',\n                  })}\n                  isInvalid={!!(errors.cityId)}\n                >\n                  <option value=\"Выберите город\">Выберите город</option>\n                  {cities && cities.map((city) => (\n                    <option key={city.id} value={city.id}>{city.name}</option>\n                  ))}\n                </Form.Select>\n              </Form.Group>\n            </InputErrorMessageProvider>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default PointEdit;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { useRateTypes } from '../../../RateTypes/hooks';\nimport onlyNumberValidate from '../../../../utils/helpers/OnlyNumberValidate';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useRateById } from './hooks';\nimport { Dispatcher } from '../../../../types/store';\nimport { RateForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\n\nconst RateEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<RateForm>({\n    defaultValues: {\n      price: '',\n      rateTypeId: 'Выберите тип тарифа',\n    }\n  });\n  const [rateTypes, rateTypesLoading] = useRateTypes();\n  const rateUploading = useUploadedEntity(rateId, 'rate');\n  const fetchRateLoading = useRateById(rateId, setValue);\n\n  const onSubmit = async (data: RateForm): Promise<void> => {\n    if (rateId) {\n      dispatch(editEntity(data, 'rate', rateId, 'Тариф сохранен'));\n    } else dispatch(createEntity(data, 'rate', 'Тариф создан'));\n  };\n\n  const onDeleteRate = (): void => {\n    if (rateId) {\n      dispatch(deleteEntity('rate', rateId, 'Тариф удален'));\n      navigate('/rates');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка тарифа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки тарифа\"\n            isCreateTable={!rateId}\n            isSubmitting={rateUploading}\n            isLoading={fetchRateLoading}\n            onDelete={onDeleteRate}\n          >\n            <Form.Group controlId=\"rateType\">\n              <Form.Label>Тип тарифа</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.rateTypeId?.message}>\n                <Form.Select\n                  size=\"sm\"\n                  disabled={rateTypesLoading}\n                  aria-describedby=\"rateType\"\n                  {...register('rateTypeId', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => value !== 'Выберите тип тарифа' || 'Вы не выбрали тип тарифа'\n                  })}\n                  isInvalid={!!(errors.rateTypeId)}\n                >\n                  <option value=\"Выберите тип тарифа\">Выберите тип тарифа</option>\n                  {rateTypes && rateTypes.data.map((rateType) => (\n                    <option key={rateType.id} value={rateType.id}>{`${rateType.name} - ${rateType.unit}`}</option>\n                  ))}\n                </Form.Select>\n              </InputErrorMessageProvider>\n            </Form.Group>\n            <Form.Group controlId=\"ratePrice\">\n              <Form.Label>Цена, ₽</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.price?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите цену\"\n                  aria-describedby=\"ratePrice\"\n                  onKeyDown={(e) => onlyNumberValidate(e)}\n                  {...register('price', {\n                    required: 'Это поле не должно быть пустым',\n                  })}\n                  isInvalid={!!(errors.price)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateEdit;\n","import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport useResize from '../../hooks/useResize';\nimport ContentContainer from '../../components/ContentContainer/ContentContainer';\nimport TableItem from '../../components/TableItem/TableItem';\nimport Spin from '../../components/Spin/Spin';\nimport { useOrderStatuses, useSortedOrderStatus } from './hooks';\nimport AddTableItemLink from '../../components/AddTableItemLink/AddTableItemLink';\n\nconst OrderStatus = (): React.ReactElement => {\n  const isResponsive = useResize(1, 1024);\n  const [orderStatus, orderStatusLoading] = useOrderStatuses();\n  const sortedOrderStatuses = useSortedOrderStatus(orderStatus);\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Статусы заказов</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Статусы заказов\">\n        <div className=\"table-container\">\n          <AddTableItemLink to=\"/edit/order-status\" />\n          {orderStatus && !orderStatusLoading && (\n            <Table\n              hover\n              borderless\n              responsive={isResponsive}\n            >\n              <thead>\n                <tr>\n                  <th>Название статуса</th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedOrderStatuses.map((status) => (\n                  <TableItem\n                    key={status.id}\n                    id={status.id}\n                    columns={[status.name]}\n                    editPageLink=\"order-status\"\n                  />\n                ))}\n                {sortedOrderStatuses.length === 0 && (\n                  <tr>\n                    <td>\n                      По вашему запросу ничего не найдено\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </Table>\n          )}\n          {orderStatusLoading && (\n            <Spin />\n          )}\n        </div>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatus;\n","import React, { useState } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useOrder } from './hooks';\nimport { OrderSort } from '../../types/Order';\nimport useResize from '../../hooks/useResize';\nimport ContentContainer from '../../components/ContentContainer/ContentContainer';\nimport OrderItem from './components/OrderItem/OrderItem';\nimport TableFilter from '../../components/TableFilter/TableFilter';\nimport OrderFilters from './components/OrderFilters/OrderFilters';\nimport Spin from '../../components/Spin/Spin';\n\nconst Order: React.FC = () => {\n  const isResponsive = useResize(1, 1440);\n  const [cityFilter, setCityFilter] = useState<string>('Все города');\n  const [dateFilter, setDateFilter] = useState<string>('За все время');\n  const [orderStatusFilter, setOrderStatusFilter] = useState<string>('Все заказы');\n  const [isFullTankFilter, setFullTankFilter] = useState<boolean>(false);\n  const [isNeedChildChairFilter, setNeedChildChairFilter] = useState<boolean>(false);\n  const [isRightWheelFilter, setRightWheelFilter] = useState<boolean>(false);\n  const [page, setPage] = useState<number>(0);\n  const [filters, setFilters] = useState<OrderSort>({\n    cityId: cityFilter,\n    orderStatusId: orderStatusFilter,\n    date: dateFilter,\n    isFullTank: isFullTankFilter,\n    isNeedChildChair: isNeedChildChairFilter,\n    isRightWheel: isRightWheelFilter,\n  });\n  const [orders, ordersLoading] = useOrder(filters, page);\n\n  const submitFilter = (): void => {\n    setFilters({\n      cityId: cityFilter,\n      orderStatusId: orderStatusFilter,\n      date: dateFilter,\n      isFullTank: isFullTankFilter,\n      isNeedChildChair: isNeedChildChairFilter,\n      isRightWheel: isRightWheelFilter,\n    });\n    setPage(0);\n  };\n\n  const resetFilter = (): void => {\n    setFilters({\n      cityId: 'Все города',\n      orderStatusId: 'Все заказы',\n      date: 'За все время',\n      isFullTank: false,\n      isNeedChildChair: false,\n      isRightWheel: false,\n    });\n    setCityFilter('Все города');\n    setOrderStatusFilter('Все заказы');\n    setDateFilter('За все время');\n    setFullTankFilter(false);\n    setNeedChildChairFilter(false);\n    setRightWheelFilter(false);\n    setPage(0);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Список заказов</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Заказы\"\n        page={page}\n        itemCount={orders?.count}\n        onSetPage={setPage}\n      >\n        <TableFilter\n          onSubmitFilter={submitFilter}\n          onResetFilter={resetFilter}\n          isFiltered={\n            filters.cityId !== 'Все города' ||\n            filters.orderStatusId !== 'Все заказы' ||\n            filters.date !== 'За все время' ||\n            filters.isFullTank !== false ||\n            filters.isNeedChildChair !== false ||\n            filters.isRightWheel !== false\n          }\n        >\n          <OrderFilters\n            dateFilter={dateFilter}\n            setDateFilter={setDateFilter}\n            cityFilter={cityFilter}\n            setCityFilter={setCityFilter}\n            orderStatusFilter={orderStatusFilter}\n            setOrderStatusFilter={setOrderStatusFilter}\n            setFullTankFilter={setFullTankFilter}\n            isFullTankFilter={isFullTankFilter}\n            setNeedChildChairFilter={setNeedChildChairFilter}\n            isNeedChildChairFilter={isNeedChildChairFilter}\n            setRightWheelFilter={setRightWheelFilter}\n            isRightWheelFilter={isRightWheelFilter}\n          />\n        </TableFilter>\n        <div className=\"table-container\">\n          {orders && !ordersLoading && (\n            <Table\n              hover\n              borderless\n              responsive={isResponsive}\n              style={{ tableLayout: 'fixed' }}\n            >\n              <tbody>\n                {orders && orders.data.map((order) => (\n                  <OrderItem\n                    key={order.id}\n                    order={order}\n                    filters={filters}\n                    page={page}\n                  />\n                ))}\n                {orders && orders.data.length === 0 && (\n                  <tr>\n                    <td>\n                      По вашему запросу ничего не найдено\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </Table>\n          )}\n          {ordersLoading && (\n            <Spin />\n          )}\n        </div>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default Order;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCities } from '../../store/Cities/thunks';\nimport { Dispatcher } from '../../types/store';\nimport { CitiesState, City } from '../../types/Cities';\nimport { SearchState } from '../../types/Search';\nimport { UploadedEntityState } from '../../types/Edit';\n\nconst citiesAlerts: string[] = [\n  'Статус заказа сохранен',\n  'Статус заказа создан',\n  'Статус заказа удален',\n];\n\nexport const useCities = (): [City[], boolean, number | null] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { cities, loading, error } = useSelector<{\n    cities: CitiesState;\n  }, CitiesState>((state) => state.cities);\n\n  const { successAlertMessage } = useSelector<{\n    uploadedEntity: UploadedEntityState;\n  }, UploadedEntityState>((state) => state.uploadedEntity);\n\n  useEffect(() => {\n    if (citiesAlerts.includes(successAlertMessage)) {\n      dispatch(fetchCities());\n    }\n  }, [successAlertMessage]);\n\n  useEffect(() => {\n    dispatch(fetchCities());\n  }, []);\n\n  return [cities, loading, error];\n};\n\nexport const useSearchSortedCities = (cities: City[]): City[] => {\n  const { searchSort } = useSelector<{\n    search: SearchState;\n  }, SearchState>((state) => state.search);\n\n  if (cities) {\n    return cities.filter((city) => {\n      return city.name\n        .toLowerCase()\n        .includes(\n          searchSort.toLowerCase()\n        );\n    });\n  }\n  return [];\n};\n","import { useEffect } from 'react';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCar } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { Car, CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\nimport fetchLocalImage from '../../../../utils/helpers/fetchLocalImage';\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [Car, boolean] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carById, carByIdLoading } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  const setValuesToForm = async (car): Promise<void> => {\n    const carImage = await fetchLocalImage(car.thumbnail.path, car.thumbnail.originalname);\n    await setValue('thumbnail', carImage, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('categoryId', car?.categoryId?.id, { shouldDirty: true });\n    setValue('description', car?.description, { shouldDirty: true });\n    setValue('colors', car?.colors, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('number', car?.number?.toUpperCase(), { shouldDirty: true });\n    setValue('priceMin', car?.priceMin.toString(), { shouldDirty: true });\n    setValue('priceMax', car?.priceMax.toString(), { shouldDirty: true });\n    setValue('tank', car?.tank || '', { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCar(carId));\n    }\n  }, [carId]);\n\n  useEffect(() => {\n    if (carById && carId) {\n      setValuesToForm(carById);\n    }\n  }, [carById]);\n\n  return [carById, carByIdLoading];\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { Dispatcher } from '../../../../types/store';\nimport { OrderStatusState } from '../../../../types/OrderStatus';\nimport { fetchOrderStatus } from '../../../../store/OrderStatus/thunks';\nimport { OrderStatusForm } from '../../../../types/Edit';\n\nexport const useOrderStatusById = (orderStatusId: string, setValue: UseFormSetValue<OrderStatusForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusById, orderStatusByIdLoading } = useSelector<{\n    orderStatus: OrderStatusState;\n  }, OrderStatusState>((state) => state.orderStatus);\n\n  const setValuesToForm = async (orderStatus): Promise<void> => {\n    setValue('name', orderStatus.name, { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (orderStatusId) {\n      dispatch(fetchOrderStatus(orderStatusId));\n    }\n  }, [orderStatusId]);\n\n  useEffect(() => {\n    if (orderStatusById && orderStatusId) {\n      setValuesToForm(orderStatusById);\n    }\n  }, [orderStatusById]);\n\n  return orderStatusByIdLoading;\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchOrder } from '../../store/Order/thunks';\nimport { Dispatcher } from '../../types/store';\nimport { OrderResponse, OrderSort, OrderState } from '../../types/Order';\nimport getAxiosConfig from './getAxiosConfig';\n\nexport const useOrder = (sorts: OrderSort, page: number): [OrderResponse, boolean, number | null] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { orders, error, loading } = useSelector<{\n    order: OrderState;\n  }, OrderState>((state) => state.order);\n\n  useEffect(() => {\n    const config = getAxiosConfig(sorts, page);\n    dispatch(fetchOrder(config));\n  }, [sorts, page]);\n\n  return [orders, loading, error];\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { CitiesState } from '../../types/Cities';\nimport {\n  requestCities,\n  requestCitiesError,\n  requestCitiesSuccess,\n  requestCity,\n  requestCityError,\n  requestCitySuccess\n} from './actions';\n\nconst citiesReducer = createReducer<CitiesState>({\n  cities: null,\n  loading: false,\n  error: null,\n  cityById: null,\n  cityByIdLoading: false,\n  cityByIdError: null,\n}, {\n  [requestCities.type]: (state) => ({\n    ...state,\n    cities: null,\n    loading: true,\n    error: null,\n  }),\n  [requestCitiesSuccess.type]: (state, { payload }) => ({\n    ...state,\n    cities: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestCitiesError.type]: (state, { payload }) => ({\n    ...state,\n    cities: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestCity.type]: (state) => ({\n    ...state,\n    cityById: null,\n    cityByIdLoading: true,\n    cityByIdError: null,\n  }),\n  [requestCitySuccess.type]: (state, { payload }) => ({\n    ...state,\n    cityById: payload,\n    cityByIdLoading: false,\n    cityByIdError: null,\n  }),\n  [requestCityError.type]: (state, { payload }) => ({\n    ...state,\n    cityById: null,\n    cityByIdLoading: false,\n    cityByIdError: payload,\n  }),\n});\n\nexport default citiesReducer;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { UploadedEntityState } from '../../types/Edit';\nimport {\n  clearUploadedEntityData,\n  uploadEntity,\n  uploadEntityError,\n  uploadEntitySuccess,\n  addSuccessAlertMessage,\n  clearSuccessAlertMessage\n} from './actions';\n\nconst uploadedEntityReducer = createReducer<UploadedEntityState>({\n  uploadedEntity: null,\n  uploadedEntityLoading: false,\n  uploadedEntityError: null,\n  successAlertMessage: null,\n}, {\n  [uploadEntity.type]: (state) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: true,\n    uploadedEntityError: null,\n  }),\n  [uploadEntitySuccess.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: payload,\n    uploadedEntityLoading: false,\n    uploadedEntityError: null,\n  }),\n  [uploadEntityError.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: false,\n    uploadedEntityError: payload,\n  }),\n  [clearUploadedEntityData.type]: (state, { payload }) => ({\n    ...state,\n    uploadedEntity: null,\n    uploadedEntityLoading: false,\n    uploadedEntityError: null,\n  }),\n  [addSuccessAlertMessage.type]: (state) => ({\n    ...state,\n    successAlertMessage: payload,\n  }),\n  [clearSuccessAlertMessage.type]: (state ) => ({\n    ...state,\n    successAlertMessage: null,\n  }),\n});\n\nexport default uploadedEntityReducer;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { RateTypesState } from '../../types/RateTypes';\nimport {\n  requestRateType, requestRateTypeError,\n  requestRateTypes,\n  requestRateTypesError,\n  requestRateTypesSuccess,\n  requestRateTypeSuccess\n} from './actions';\n\nconst rateTypesReducer = createReducer<RateTypesState>({\n  rateTypes: null,\n  loading: false,\n  error: null,\n  rateTypeById: null,\n  rateTypeByIdLoading: false,\n  rateTypeByIdError: null,\n}, {\n  [requestRateTypes.type]: (state) => ({\n    ...state,\n    rateTypes: null,\n    loading: true,\n    error: null,\n  }),\n  [requestRateTypesSuccess.type]: (state, { payload }) => ({\n    ...state,\n    rateTypes: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestRateTypesError.type]: (state, { payload }) => ({\n    ...state,\n    rateTypes: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestRateType.type]: (state) => ({\n    ...state,\n    rateTypeById: null,\n    rateTypeByIdLoading: true,\n    rateTypeByIdError: null,\n  }),\n  [requestRateTypeSuccess.type]: (state, { payload }) => ({\n    ...state,\n    rateTypeById: payload,\n    rateTypeByIdLoading: false,\n    rateTypeByIdError: null,\n  }),\n  [requestRateTypeError.type]: (state, { payload }) => ({\n    ...state,\n    rateTypeById: null,\n    rateTypeByIdLoading: false,\n    rateTypeByIdError: payload,\n  }),\n});\n\nexport default rateTypesReducer;\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  requestRate,\n  requestRateError,\n  requestRates,\n  requestRatesError,\n  requestRatesSuccess,\n  requestRateSuccess\n} from './actions';\nimport { RateState } from '../../types/Rates';\n\nconst rateReducer = createReducer<RateState>({\n  rates: null,\n  loading: false,\n  error: null,\n  rateById: null,\n  rateByIdLoading: false,\n  rateByIdError: null,\n}, {\n  [requestRates.type]: (state) => ({\n    ...state,\n    rates: null,\n    loading: true,\n    error: null,\n  }),\n  [requestRatesSuccess.type]: (state, { payload }) => ({\n    ...state,\n    rates: payload,\n    loading: false,\n    error: null,\n  }),\n  [requestRatesError.type]: (state, { payload }) => ({\n    ...state,\n    rates: null,\n    loading: false,\n    error: payload,\n  }),\n  [requestRate.type]: (state) => ({\n    ...state,\n    rateById: null,\n    rateByIdLoading: true,\n    rateByIdError: null,\n  }),\n  [requestRateSuccess.type]: (state, { payload }) => ({\n    ...state,\n    rateById: payload,\n    rateByIdLoading: false,\n    rateByIdError: null,\n  }),\n  [requestRateError.type]: (state, { payload }) => ({\n    ...state,\n    rateById: null,\n    rateByIdLoading: false,\n    rateByIdError: payload,\n  }),\n});\n\nexport default rateReducer;\n","__webpack_require__.h = () => (\"e0fef0f005b81ab6c718\")"],"names":[],"sourceRoot":""}