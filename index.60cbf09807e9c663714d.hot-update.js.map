{"version":3,"file":"index.60cbf09807e9c663714d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;AAGA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AADA;AADA;;AAMA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AADA;AAPA;AADA;AANA;AAkCA;;AAEA;;;;;;;;;;;;;;;;;ACrEA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/OrderStatusEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/actions.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport { Dispatcher } from '../../../../types/store';\nimport { OrderStatusForm } from '../../../../types/OrderStatus';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { CarForm } from '../../../../types/Edit';\n\nconst OrderStatusEdit = (): React.ReactElement => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<OrderStatusForm>({\n    defaultValues: {\n      name: '',\n    }\n  });\n\n  const onSubmit = async (data: CarForm): Promise<void> => {\n    // if (newCar && carId) {\n    //   dispatch(editCar(newCar, carId));\n    // } else if (newCar) dispatch(createCar(newCar));\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка статуса заказа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка статуса заказа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            console.log(data);\n          })}\n        >\n          <InputsContainer title=\"Настройки статуса заказа\">\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Название статуса</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"carName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </InputsContainer>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatusEdit;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const requestOrderStatuses = createAction('Order status is fetching...');\n\nexport const requestOrderStatusesSuccess = createAction<object>('Order status has already fetched');\n\nexport const requestOrderStatusesError = createAction<number>('Order status fetched with error');\n\n// export const requestOrderStatus = createAction('Car is fetching...');\n//\n// export const requestCarSuccess = createAction<object>('Car has already fetched');\n//\n// export const requestCarError = createAction<number>('Car fetched with error');\n//\n// export const uploadCar = createAction('Car is posting...');\n//\n// export const uploadCarSuccess = createAction<object>('Car has already posted');\n//\n// export const uploadCarError = createAction<number>('Car not posted');\n//\n// export const clearUploadedCarData = createAction('Clear posted car data...');\n","__webpack_require__.h = () => (\"8e451fefe5afcfa7f318\")"],"names":[],"sourceRoot":""}