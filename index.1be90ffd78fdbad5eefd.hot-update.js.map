{"version":3,"file":"index.1be90ffd78fdbad5eefd.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AC1DA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCar } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { Car, CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\nimport fetchLocalImage from '../../../../utils/helpers/fetchLocalImage';\n\nexport const useUploadingCar = (carId: string | null): boolean => {\n  const navigate = useNavigate();\n  const { uploadedCar, uploadedCarLoading } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  useEffect(() => {\n    if (uploadedCar && !carId) {\n      navigate(`/edit/car/${uploadedCar.data[0].id}`);\n    }\n  }, [uploadedCar]);\n\n  return uploadedCarLoading;\n};\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [Car, boolean] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carById, carByIdLoading, carByIdError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  const setValuesToForm = async (): Promise<void> => {\n    const car = carById;\n    const carImage = await fetchLocalImage(car.thumbnail.path, car.thumbnail.originalname);\n    await setValue('thumbnail', carImage, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('categoryId', car?.categoryId?.id, { shouldDirty: true });\n    setValue('description', car?.description, { shouldDirty: true });\n    setValue('colors', car?.colors, { shouldDirty: true });\n    setValue('name', car?.name, { shouldDirty: true });\n    setValue('number', car?.number?.toUpperCase(), { shouldDirty: true });\n    setValue('priceMin', car.priceMin.toString(), { shouldDirty: true });\n    setValue('priceMax', car.priceMax.toString(), { shouldDirty: true });\n  };\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCar(carId));\n    }\n  }, [carId]);\n\n  useEffect(() => {\n    if (carById && carId) {\n      setValuesToForm();\n    }\n  }, [carById]);\n\n  return [carById, carByIdLoading];\n};\n","__webpack_require__.h = () => (\"c5d1848e0f171f119d67\")"],"names":[],"sourceRoot":""}