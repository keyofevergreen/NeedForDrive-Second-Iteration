{"version":3,"file":"index.f91c0fb6bb154805f33e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAYA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AAGA;AAAA;AAJA;AAQA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AADA;AADA;AAWA;AADA;AAYA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AADA;AAFA;AApCA;AAsDA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AADA;AAFA;AAoBA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAJA;AAAA;AATA;AADA;AAoBA;AAAA;AAGA;AACA;AAEA;AACA;AALA;AAFA;AAvBA;AAmCA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAPA;AAYA;AAhBA;AADA;AAFA;AAuBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAZA;AAeA;AACA;AACA;AACA;AAJA;AAMA;;AADA;AAIA;AATA;AAfA;AADA;AAFA;AAlGA;AAvDA;AAPA;AAJA;AANA;AAgNA;;AAEA;;;;;;;;ACxTA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/CarEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Form, InputGroup } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { CarForm } from '../../../../types/Edit';\nimport { Dispatcher } from '../../../../types/store';\nimport { useCategory } from '../../../Categories/hooks';\nimport { imageOnErrorHandler } from '../../../../utils/helpers/imageOnErrorHandler';\nimport { useCarById, useSuccessfullySavedCar } from './hooks';\nimport { useConvertFile } from '../../../../utils/helpers/hooks';\nimport { createCar } from '../../../../store/Cars/thunks';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport MyProgressBar from './components/MyProgressBar/MyProgressBar';\nimport styles from './styles.module.scss';\n\nconst CarEdit = (): React.ReactElement => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { carId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    getFieldState,\n    formState: { errors },\n    formState\n  } = useForm<CarForm>({\n    defaultValues: {\n      name: '',\n      categoryId: 'Выберите категорию',\n      description: '',\n      colors: [],\n      thumbnail: null,\n      number: '',\n      priceMin: '',\n      priceMax: '',\n    }\n  });\n  register('colors', {\n    validate: (value) => value.length > 0 || 'Добавьте хотя бы один цвет',\n  });\n  register('thumbnail', {\n    required: 'Выберите изображение автомобиля',\n  });\n  const [car, carLoading] = useCarById(carId, setValue);\n  const converter = useConvertFile();\n  const [colorValue, setColorValue] = useState<string>('');\n  const [categories, categoriesLoading] = useCategory();\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedImage, setSelectedImage] = useState<string>('');\n  const responseLoading = useSuccessfullySavedCar();\n  const currentCar = watch('name');\n  const currentImage = watch('thumbnail');\n  const currentCategory = watch('categoryId');\n  const colorsCheckboxes = watch('colors');\n\n  useEffect(() => {\n    if (categories) {\n      const currCategoryObject = categories.find((c) => c.id === currentCategory);\n      setSelectedCategory(currCategoryObject?.name);\n    }\n  }, [currentCategory]);\n\n  useEffect(() => {\n    if (currentImage && currentImage[0]?.name) {\n      setSelectedImage(URL.createObjectURL(currentImage[0]));\n    }\n  }, [currentImage]);\n\n  const addColor = (): void => {\n    const currentColors = getValues('colors');\n    setValue('colors', [...currentColors, colorValue], { shouldValidate: true, shouldDirty: true });\n    setColorValue('');\n  };\n\n  const deleteColor = (colorForDelete): void => {\n    const currentColors = getValues('colors');\n    setValue('colors', currentColors.filter((color) => color !== colorForDelete), { shouldDirty: true });\n  };\n\n  const onSubmit = async (data: CarForm): Promise<void> => {\n    const carImage = data.thumbnail[0];\n    const path = await converter(carImage);\n    const newCar = {\n      ...data,\n      thumbnail: {\n        size: carImage.size,\n        originalname: carImage.name,\n        mimetype: carImage.type,\n        path,\n      }\n    };\n    if (newCar && carId) console.log('Ooops');\n    if (newCar) dispatch(createCar(newCar));\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка автомобиля</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Карточка автомобиля\"\n        className={styles['car-edit-container-wrap']}\n      >\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data, e) => {\n            onSubmit(data);\n          })}\n        >\n          <div className={styles['car-edit']}>\n            {(!carId || (carId && car && !carLoading)) && (\n              <div className={styles['car-edit__card']}>\n                <img\n                  src={selectedImage ? selectedImage : ''}\n                  alt=\"car-name\"\n                  onError={imageOnErrorHandler}\n                />\n                <div className={styles['car-edit__details']}>\n                  <h2>\n                    {currentCar}\n                  </h2>\n                  <span>\n                    {selectedCategory && selectedCategory.length > 0 ? selectedCategory : 'Категория не выбрана'}\n                  </span>\n                </div>\n                <div className={styles['car-edit__file-input-container']}>\n                  <InputErrorMessageProvider errorMessage={errors.thumbnail?.message}>\n                    <Form.Control\n                      type=\"file\"\n                      accept=\"image/png, image/jpeg\"\n                      onChange={(e: ChangeEvent<HTMLInputElement>) => setValue('thumbnail', e.target.files, { shouldDirty: true })}\n                      isInvalid={!!(errors.thumbnail)}\n                    />\n                  </InputErrorMessageProvider>\n                </div>\n                <MyProgressBar\n                  formStates={[\n                    getFieldState('name', formState),\n                    getFieldState('categoryId', formState),\n                    getFieldState('colors', formState),\n                    getFieldState('thumbnail', formState),\n                    getFieldState('description', formState),\n                    getFieldState('number', formState),\n                    getFieldState('priceMin', formState),\n                    getFieldState('priceMax', formState)\n                  ]}\n                />\n                <Form.Group className={styles['car-edit__description-textarea']} controlId=\"carDescription\">\n                  <Form.Label>Описание</Form.Label>\n                  <InputErrorMessageProvider errorMessage={errors.description?.message}>\n                    <Form.Control\n                      as=\"textarea\"\n                      rows={4}\n                      aria-describedby=\"carDescription\"\n                      placeholder=\"Введите описание\"\n                      {...register('description', {\n                        required: 'Это поле не должно быть пустым',\n                      })}\n                      isInvalid={!!(errors.description)}\n                    />\n                  </InputErrorMessageProvider>\n                </Form.Group>\n              </div>\n            )}\n            <InputsContainer\n              title=\"Настройки автомобиля\"\n              isCreateTable={!carId}\n              isLoading={responseLoading}\n              className={styles['car-form-container']}\n            >\n              <Form.Group controlId=\"carName\">\n                <Form.Label>Модель автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите модель\"\n                    aria-describedby=\"carName\"\n                    {...register('name', {\n                      required: 'Это поле не должно быть пустым'\n                    })}\n                    isInvalid={!!(errors.name)}\n                  />\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"categoryName\">\n                <Form.Label>Тип автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.categoryId?.message}>\n                  <Form.Select\n                    size=\"sm\"\n                    disabled={categoriesLoading}\n                    aria-describedby=\"categoryName\"\n                    {...register('categoryId', {\n                      required: 'Это поле не должно быть пустым',\n                      validate: value => value !== 'Выберите категорию' || 'Вы не выбрали категорию',\n                    })}\n                    isInvalid={!!(errors.categoryId)}\n                  >\n                    <option value=\"Выберите категорию\">Выберите категорию</option>\n                    {categories && categories.map((category) => (\n                      <option key={category.id} value={category.id}>{category.name}</option>\n                    ))}\n                  </Form.Select>\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"CarColors\">\n                <Form.Label>Доступные цвета</Form.Label>\n                {/*@ts-ignore*/}\n                <InputErrorMessageProvider errorMessage={errors.colors?.message}>\n                  <InputGroup className={styles['form__colors-input-group']}>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Введите цвет\"\n                      aria-describedby=\"CarColors\"\n                      value={colorValue}\n                      onChange={(e) => setColorValue(e.target.value)}\n                      isInvalid={!!(errors.colors)}\n                    />\n                    <Button\n                      variant=\"outline-primary\"\n                      className={styles['form__colors-add-button']}\n                      onClick={addColor}\n                      disabled={colorValue.length === 0}\n                    >\n                      Add Color\n                    </Button>\n                  </InputGroup>\n                </InputErrorMessageProvider>\n                <div className={styles['form__colors-checkbox']}>\n                  {colorsCheckboxes.map((color, index) => (\n                    <Form.Check\n                      type=\"checkbox\"\n                      label={color}\n                      key={`color-${index}`}\n                      onClick={() => deleteColor(color)}\n                      defaultChecked\n                    />\n                  ))}\n                </div>\n              </Form.Group>\n              <Form.Group controlId=\"carNumber\">\n                <Form.Label>Номер машины</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.number?.message}>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите номер\"\n                    aria-describedby=\"carNumber\"\n                    {...register('number', {\n                      required: 'Это поле не должно быть пустым',\n                      onChange: (e) => setValue('number', e.target.value.toUpperCase()),\n                      minLength: {\n                        value: 6,\n                        message: 'Номер должен быть длинной от 6 до 8 символов'\n                      },\n                      maxLength: {\n                        value: 8,\n                        message: 'Номер должен быть длинной от 6 до 8 символов'\n                      }\n                    })}\n                    isInvalid={!!(errors.number)}\n                  />\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"priceRange\">\n                <Form.Label>Стоимость аренды, ₽</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.priceMin?.message || errors.priceMax?.message}>\n                  <ButtonGroup>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"От 1000 ₽\"\n                      aria-describedby=\"priceRange\"\n                      className=\"input-range\"\n                      {...register('priceMin', {\n                        required: 'Эти поля не должны быть пустыми',\n                        validate: {\n                          notEqualPriceMax: value => Number(value) !== Number(getValues('priceMax')) || 'Начальная цена должна быть меньше конечной',\n                          lessThanPriceMax: value => Number(value) < Number(getValues('priceMax')) || 'Начальная цена не может превышать конечную',\n                        },\n                      })}\n                      isInvalid={!!(errors.priceMin || errors.priceMax)}\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"До 5000 ₽\"\n                      aria-describedby=\"priceRange\"\n                      className=\"input-range\"\n                      {...register('priceMax', {\n                        required: 'Эти поля не должны быть пустыми',\n                        // validate: value => value !== 'Выберите категорию',\n                      })}\n                      isInvalid={!!(errors.priceMin || errors.priceMax)}\n                    />\n                  </ButtonGroup>\n                </InputErrorMessageProvider>\n              </Form.Group>\n            </InputsContainer>\n          </div>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CarEdit;\n","__webpack_require__.h = () => (\"0dd9e18921fec951bbe9\")"],"names":[],"sourceRoot":""}