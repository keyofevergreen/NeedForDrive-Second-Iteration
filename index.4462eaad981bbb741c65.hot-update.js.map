{"version":3,"file":"index.4462eaad981bbb741c65.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AADA;AAFA;AAoBA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AADA;AAFA;AA3BA;AAPA;AADA;AANA;AA6DA;;AAEA;;;;;;;;ACjHA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateEdit/RateEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { useRateTypes } from '../../../RateTypes/hooks';\nimport onlyNumberValidate from '../../../../utils/helpers/OnlyNumberValidate';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { useRateById } from './hooks';\nimport { Dispatcher } from '../../../../types/store';\nimport { PointForm, RateForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\n\nconst RateEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<RateForm>({\n    defaultValues: {\n      price: '',\n      rateTypeId: 'Выберите тип тарифа',\n    }\n  });\n  const [rateTypes, rateTypesLoading] = useRateTypes();\n  const rateUploading = useUploadedEntity(rateId, 'point');\n  const fetchRateLoading = useRateById(rateId, setValue);\n\n  const onSubmit = async (data: RateForm): Promise<void> => {\n    if (rateId) {\n      dispatch(editEntity(data, 'rate', rateId, 'Тариф сохранен'));\n    } else dispatch(createEntity(data, 'rate', 'Тариф создан'));\n  };\n\n  const onDeletePoint = (): void => {\n    if (rateId) {\n      dispatch(deleteEntity('rate', rateId, 'Тариф удален'));\n      navigate('/rates');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка тарифа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки тарифа\"\n            isCreateTable={!rateId}\n            isSubmitting={rateUploading}\n            isLoading={fetchRateLoading}\n            onDelete={onDeletePoint}\n          >\n            <Form.Group controlId=\"rateType\">\n              <Form.Label>Тип тарифа</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.rateTypeId?.message}>\n                <Form.Select\n                  size=\"sm\"\n                  disabled={rateTypesLoading}\n                  aria-describedby=\"rateType\"\n                  {...register('rateTypeId', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: (value) => value !== 'Выберите тип тарифа' || 'Вы не выбрали тип тарифа'\n                  })}\n                  isInvalid={!!(errors.rateTypeId)}\n                >\n                  <option value=\"Выберите тип тарифа\">Выберите тип тарифа</option>\n                  {rateTypes && rateTypes.data.map((rateType) => (\n                    <option key={rateType.id} value={rateType.id}>{`${rateType.name} - ${rateType.unit}`}</option>\n                  ))}\n                </Form.Select>\n              </InputErrorMessageProvider>\n            </Form.Group>\n            <Form.Group controlId=\"ratePrice\">\n              <Form.Label>Цена, ₽</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.price?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите цену\"\n                  aria-describedby=\"ratePrice\"\n                  onKeyDown={(e) => onlyNumberValidate(e)}\n                  {...register('price', {\n                    required: 'Это поле не должно быть пустым',\n                  })}\n                  isInvalid={!!(errors.price)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateEdit;\n","__webpack_require__.h = () => (\"5ed434b05b0f8bdcc794\")"],"names":[],"sourceRoot":""}