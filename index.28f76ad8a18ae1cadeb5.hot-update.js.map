{"version":3,"file":"index.28f76ad8a18ae1cadeb5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;;;;AAGA;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AACA;;AAEA;AACA;AACA;AAAA;AAKA;;AAEA;AACA;AACA;AAAA;AAKA;;AAEA;AACA;AACA;AAAA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AACA;AACA;AALA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AArBA;AAdA;AA0CA;;AAEA;;;;;;;;ACpHA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Order/components/OrderItemStatusButtons/OrderItemStatusButtons.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { OrderStatus, OrderStatusState } from '../../../../types/OrderStatus';\nimport CheckMark from '../../../../assets/CheckMark.component.svg';\nimport CloseIcon from '../../../../assets/CloseIcon.component.svg';\nimport { Order, OrderSort } from '../../../../types/Order';\nimport { Dispatcher } from '../../../../types/store';\nimport { editEntity } from '../../../../store/Edit/thunks';\nimport { fetchOrder } from '../../../../store/Order/thunks';\nimport getAxiosConfig from '../../getAxiosConfig';\nimport { UploadedEntityState } from '../../../../types/Edit';\n\nconst cx = classNames;\n\ninterface IOrderItemStatusButtons {\n  currentOrderStatus: OrderStatus,\n  filters: OrderSort,\n  page: number,\n  order: Order,\n}\n\nconst OrderItemStatusButtons = ({ currentOrderStatus, filters, page, order }: IOrderItemStatusButtons): React.ReactElement => {\n  const { id, carId, cityId, pointId, orderStatusId } = order;\n  const dispatch = useDispatch<Dispatcher>();\n\n  const { orderStatus, loading, submitStatusId, cancelStatusId } = useSelector<{\n    orderStatus: OrderStatusState;\n  }, OrderStatusState>((state) => state.orderStatus);\n  const { successAlertMessage } = useSelector<{\n    uploadedEntity: UploadedEntityState;\n  }, UploadedEntityState>((state) => state.uploadedEntity);\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [orderStatusValue, setOrderStatus] = useState<string>(orderStatusId.id);\n\n  const onSubmitStatus = (): void => {\n    dispatch(editEntity(\n      { orderStatusId: submitStatusId },\n      'order',\n      id,\n      `Заказ №${id.substr(0, 6)}, ${carId.name} в ${cityId.name} на ${pointId.address} сохранен`\n    ));\n  };\n\n  const onCancelStatus = (): void => {\n    dispatch(editEntity(\n      { orderStatusId: cancelStatusId },\n      'order',\n      id,\n      `Заказ №${id.substr(0, 6)}, ${carId.name} в ${cityId.name} на ${pointId.address} отменен`\n    ));\n  };\n\n  const onEditStatus = (): void => {\n    dispatch(editEntity(\n      { orderStatusId: orderStatusValue },\n      'order',\n      id,\n      `Статус заказа №${id.substr(0, 6)}, ${carId.name} в ${cityId.name} на ${pointId.address} изменен`\n    ));\n  }\n\n  useEffect(() => {\n    if (successAlertMessage) {\n      const config = getAxiosConfig(filters, page);\n      dispatch(fetchOrder(config));\n    }\n  }, [successAlertMessage]);\n\n  return (\n    <ButtonGroup className={cx('order-item-status-edit-btn', { 'edit-mode': editMode })}>\n      {!editMode && currentOrderStatus.name === 'Новые' && (\n        <>\n          <Button size=\"sm\" variant=\"outline-primary\" onClick={() => onSubmitStatus()}>Подтвердить</Button>\n          <Button size=\"sm\" variant=\"outline-danger\" onClick={() => onCancelStatus()}>Отменить</Button>\n        </>\n      )}\n      {!editMode && currentOrderStatus.name !== 'Новые' && (\n        <>\n          <Button size=\"sm\" variant=\"outline-danger\" onClick={() => onCancelStatus()}>Отменить</Button>\n          <Button size=\"sm\" variant=\"outline-primary\" onClick={() => setEditMode(true)}>Изменить</Button>\n        </>\n      )}\n      {editMode && currentOrderStatus.name !== 'Новые' && (\n        <>\n          <Form.Select\n            size=\"sm\"\n            value={orderStatusValue}\n            onChange={(e) => setOrderStatus(e.target.value)}\n            disabled={loading}\n            className=\"status-edit-select\"\n          >\n            {orderStatus && orderStatus.map((status) => (\n              <option key={status.id} value={status.id}>{status.name}</option>\n            ))}\n          </Form.Select>\n          <Button\n            size=\"sm\"\n            variant=\"outline-primary\"\n            className=\"submit-btn\"\n            disabled={orderStatusValue === orderStatusId.id}\n            onClick={() => onEditStatus()}\n          >\n            <CheckMark />\n          </Button>\n          <Button size=\"sm\" variant=\"outline-danger\" className=\"cancel-btn\" onClick={() => setEditMode(false)}>\n            <CloseIcon />\n          </Button>\n        </>\n      )}\n    </ButtonGroup>\n  );\n};\n\nexport default OrderItemStatusButtons;\n","__webpack_require__.h = () => (\"936793b40e298b89c833\")"],"names":[],"sourceRoot":""}