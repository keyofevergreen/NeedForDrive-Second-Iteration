{"version":3,"file":"index.fc86f3f9fe9dd26d94ce.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;;;AAEA;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AACA;AAAA;AAGA;AAAA;AAAA;AAJA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAJA;AASA;AAAA;AAAA;AAAA;AAVA;AAXA;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AAGA;AAAA;AAJA;AAQA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAIA;AADA;AAGA;AANA;AADA;AADA;AAaA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AADA;AAFA;AAnCA;AAoDA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AADA;AAFA;AAoBA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAJA;AAAA;AAVA;AADA;AAqBA;AAAA;AAGA;AACA;AAEA;AACA;AALA;AAFA;AAxBA;AAvCA;AApDA;AAPA;AAJA;AANA;AAsJA;;AAEA;;;;;;;;;;;;;;;;;;;;ACpOA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAUA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAFA;AAXA;AADA;AANA;AAgCA;;AAEA;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AADA;AADA;AANA;AAsBA;;AAEA;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AADA;AADA;AANA;AAsBA;;AAEA;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAEA;AAAA;AAAA;AATA;AADA;AAFA;AArBA;AADA;AANA;AAiDA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AARA;AAFA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AADA;AAFA;AAfA;AADA;AANA;AAqCA;;AAEA;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAFA;AAXA;AADA;AANA;AAgCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnFA","sources":["webpack://NeedForDrive-Second-Iteration/./src/components/InputsContainer/styles.module.scss","webpack://NeedForDrive-Second-Iteration/./src/components/InputsContainer/InputsContainer.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/CarEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CategoryEdit/CategoryEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CityEdit/CityEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/OrderStatusEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/PointEdit/PointEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateEdit/RateEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateTypesEdit/RateTypesEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/components/InputsContainer/styles.module.scss?572f","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".form-container___UU7lF {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n  flex: 1 1;\\n  padding: 20px 18px;\\n  min-height: 386px;\\n  gap: 14px;\\n  max-height: 100%;\\n}\\n.form-container___UU7lF h3 {\\n  font-size: 17px;\\n  font-weight: 500;\\n  font-family: Roboto, Helvetica, sans-serif;\\n  color: var(--dark-blue);\\n  margin-bottom: 38px;\\n}\\n\\n.form___yvHth {\\n  display: grid;\\n  gap: 18px;\\n  grid-template-columns: repeat(auto-fit, minmax(276px, 283px));\\n  max-width: 600px;\\n}\\n.form___yvHth label {\\n  font-size: 10px;\\n}\\n\\n.form-btn-line___qA2cQ {\\n  display: flex;\\n  justify-content: space-between;\\n  gap: 12px;\\n}\\n.form-btn-line___qA2cQ div {\\n  display: flex;\\n  gap: 12px;\\n}\\n\\n@media (max-width: 1023.98px) {\\n  .form___yvHth {\\n    width: 283px;\\n  }\\n}\\n@media (max-width: 767.98px) {\\n  .form-container___UU7lF {\\n    padding: 16px;\\n  }\\n  .form-container___UU7lF h3 {\\n    margin-bottom: 16px;\\n  }\\n\\n  .form___yvHth {\\n    grid-template-columns: 1fr;\\n    max-width: 100%;\\n    gap: 20px;\\n    width: 100%;\\n  }\\n\\n  .form-btn-line___qA2cQ {\\n    margin-top: 12px;\\n    display: flex;\\n    flex-direction: column;\\n  }\\n  .form-btn-line___qA2cQ div {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 12px;\\n  }\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/InputsContainer/styles.module.scss\"],\"names\":[],\"mappings\":\"AAAA;EACE,aAAA;EACA,sBAAA;EACA,8BAAA;EACA,SAAA;EACA,kBAAA;EACA,iBAAA;EACA,SAAA;EACA,gBAAA;AACF;AACE;EACE,eAAA;EACA,gBAAA;EACA,0CAAA;EACA,uBAAA;EACA,mBAAA;AACJ;;AAGA;EACE,aAAA;EACA,SAAA;EACA,6DAAA;EACA,gBAAA;AAAF;AAEE;EACE,eAAA;AAAJ;;AAIA;EACE,aAAA;EACA,8BAAA;EACA,SAAA;AADF;AAGE;EACE,aAAA;EACA,SAAA;AADJ;;AAKA;EACE;IACE,YAAA;EAFF;AACF;AAKA;EACE;IACE,aAAA;EAHF;EAKE;IACE,mBAAA;EAHJ;;EAOA;IACE,0BAAA;IACA,eAAA;IACA,SAAA;IACA,WAAA;EAJF;;EAOA;IACE,gBAAA;IACA,aAAA;IACA,sBAAA;EAJF;EAME;IACE,aAAA;IACA,sBAAA;IACA,SAAA;EAJJ;AACF\",\"sourcesContent\":[\".form-container {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n  flex: 1 1;\\n  padding: 20px 18px;\\n  min-height: 386px;\\n  gap: 14px;\\n  max-height: 100%;\\n\\n  h3 {\\n    font-size: 17px;\\n    font-weight: 500;\\n    font-family: Roboto, Helvetica, sans-serif;\\n    color: var(--dark-blue);\\n    margin-bottom: 38px;\\n  }\\n}\\n\\n.form {\\n  display: grid;\\n  gap: 18px;\\n  grid-template-columns: repeat(auto-fit, minmax(276px, 283px));\\n  max-width: 600px;\\n\\n  label {\\n    font-size: 10px;\\n  }\\n}\\n\\n.form-btn-line {\\n  display: flex;\\n  justify-content: space-between;\\n  gap: 12px;\\n\\n  div {\\n    display: flex;\\n    gap: 12px;\\n  }\\n}\\n\\n@media (max-width: 1023.98px) {\\n  .form {\\n    width: 283px;\\n  }\\n}\\n\\n@media (max-width: 767.98px) {\\n  .form-container {\\n    padding: 16px;\\n\\n    h3 {\\n      margin-bottom: 16px;\\n    }\\n  }\\n\\n  .form {\\n    grid-template-columns: 1fr;\\n    max-width: 100%;\\n    gap: 20px;\\n    width: 100%;\\n  }\\n\\n  .form-btn-line {\\n    margin-top: 12px;\\n    display: flex;\\n    flex-direction: column;\\n\\n    div {\\n      display: flex;\\n      flex-direction: column;\\n      gap: 12px;\\n    }\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"form-container\": \"form-container___UU7lF\",\n\t\"form\": \"form___yvHth\",\n\t\"form-btn-line\": \"form-btn-line___qA2cQ\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { FormHTMLAttributes } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport classNames from 'classnames/bind';\nimport styles from './styles.module.scss';\n\nconst cx = classNames.bind(styles);\n\ninterface IFormContainerProps extends React.HTMLProps<HTMLFormElement>{\n  children: React.ReactNode,\n  title: string,\n  className?: string,\n  onDelete?: React.MouseEventHandler,\n  isCreateTable?: boolean,\n}\n\nconst InputsContainer = ({ children, title, className, onSubmit, onDelete, isCreateTable }: IFormContainerProps): React.ReactElement => (\n  <div\n    className={cx('form-container', className)}\n  >\n    <div>\n      <h3>\n        {title}\n      </h3>\n      <div className={styles['form']}>\n        {children}\n      </div>\n    </div>\n    <div className={styles['form-btn-line']}>\n      <div>\n        <Button variant=\"primary\" size=\"sm\" type=\"submit\">\n          {isCreateTable ? 'Создать' : 'Сохранить'}\n        </Button>\n        <Button variant=\"light\" size=\"sm\">\n          Отменить\n        </Button>\n      </div>\n      {!isCreateTable && (\n        <Button variant=\"danger\" size=\"sm\">\n          Удалить\n        </Button>\n      )}\n    </div>\n  </div>\n);\n\nexport default InputsContainer;\n","import React, { useEffect, useState } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { CarEditForm } from '../../../../types/Edit';\nimport { useCategory } from '../../../Categories/hooks';\nimport { imageOnErrorHandler } from '../../../../utils/helpers/imageOnErrorHandler';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport MyProgressBar from './components/MyProgressBar/MyProgressBar';\nimport styles from './styles.module.scss';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\n\nconst CarEdit = (): React.ReactElement => {\n  const { carId } = useParams();\n  const [colorValue, setColorValue] = useState<string>('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [categories, categoriesLoading] = useCategory();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    getFieldState,\n    formState: { errors },\n    formState,\n  } = useForm<CarEditForm>({\n    defaultValues: {\n      car: '',\n      category: 'Выберите категорию',\n      description: '',\n      colorsArray: [],\n      image: null,\n    }\n  });\n  const { ref } = register('colorsArray', {\n    validate: (value) => value.length > 0 || 'Добавьте хотя бы один цвет',\n  });\n  const currentCar = watch('car');\n  const currentImage = watch('image');\n  const currentCategory = watch('category');\n  const colorsCheckboxes = watch('colorsArray');\n\n  useEffect(() => {\n    if (categories) {\n      const currCategoryObject = categories.find((category) => category.id === currentCategory);\n      setSelectedCategory(currCategoryObject?.name);\n    }\n  }, [currentCategory]);\n\n  const addColor = (): void => {\n    const currentColors = getValues('colorsArray');\n    setValue('colorsArray', [...currentColors, colorValue], { shouldValidate: true, shouldDirty: true });\n    setColorValue('');\n  };\n\n  const deleteColor = (colorForDelete): void => {\n    const currentColors = getValues('colorsArray');\n    setValue('colorsArray', currentColors.filter((color) => color !== colorForDelete), { shouldDirty: true });\n  };\n\n  const imageUploadHandler = (e): void => {\n    const selectedImg = e.target.files[0];\n    if (selectedImg) {\n      setValue('image', selectedImg, { shouldDirty: true });\n    }\n  };\n\n  useEffect(() => {\n    console.log(currentImage);\n  }, [currentImage]);\n\n  // @ts-ignore\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка автомобиля</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Карточка автомобиля\"\n        className={styles['car-edit-container-wrap']}\n      >\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            console.log(data);\n          })}\n        >\n          <div className={styles['car-edit']}>\n            <div className={styles['car-edit__card']}>\n              <img\n                src={currentImage && currentImage.length > 0 ? URL.createObjectURL(currentImage[0]) : ''}\n                alt=\"car-name\"\n                onError={imageOnErrorHandler}\n              />\n              <div className={styles['car-edit__details']}>\n                <h2>\n                  {currentCar}\n                </h2>\n                <span>\n                  {selectedCategory && selectedCategory.length > 0 ? selectedCategory : 'Категория не выбрана'}\n                </span>\n              </div>\n              <div className={styles['car-edit__file-input-container']}>\n                <InputErrorMessageProvider errorMessage={errors.image?.message}>\n                  <Form.Control\n                    type=\"file\"\n                    accept=\"image/png, image/jpeg\"\n                    {...register('image', {\n                      required: 'Выберите изображение автомобиля',\n                    })}\n                    isInvalid={!!(errors.image)}\n                  />\n                </InputErrorMessageProvider>\n              </div>\n              <MyProgressBar\n                formStates={[\n                  getFieldState('car', formState),\n                  getFieldState('category', formState),\n                  getFieldState('colorsArray', formState),\n                  getFieldState('image', formState),\n                  getFieldState('description', formState),\n                ]}\n              />\n              <Form.Group className={styles['car-edit__description-textarea']} controlId=\"carDescription\">\n                <Form.Label>Описание</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.description?.message}>\n                  <Form.Control\n                    as=\"textarea\"\n                    rows={4}\n                    aria-describedby=\"carDescription\"\n                    placeholder=\"Введите описание\"\n                    {...register('description', {\n                      required: 'Это поле не должно быть пустым',\n                    })}\n                    isInvalid={!!(errors.description)}\n                  />\n                </InputErrorMessageProvider>\n              </Form.Group>\n            </div>\n            <InputsContainer\n              title=\"Настройки автомобиля\"\n              isCreateTable={!carId}\n              className={styles['car-form-container']}\n            >\n              <Form.Group controlId=\"carName\">\n                <Form.Label>Модель автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.car?.message}>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите модель\"\n                    aria-describedby=\"carName\"\n                    {...register('car', {\n                      required: 'Это поле не должно быть пустым'\n                    })}\n                    isInvalid={!!(errors.car)}\n                  />\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"categoryName\">\n                <Form.Label>Тип автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.category?.message}>\n                  <Form.Select\n                    size=\"sm\"\n                    disabled={categoriesLoading}\n                    aria-describedby=\"pointCity\"\n                    {...register('category', {\n                      required: 'Это поле не должно быть пустым',\n                      validate: value => value !== 'Выберите категорию' || 'Вы не выбрали категорию',\n                    })}\n                    isInvalid={!!(errors.category)}\n                  >\n                    <option value=\"Выберите категорию\">Выберите категорию</option>\n                    {categories && categories.map((category) => (\n                      <option key={category.id} value={category.id}>{category.name}</option>\n                    ))}\n                  </Form.Select>\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"CarColors\">\n                <Form.Label>Доступные цвета</Form.Label>\n                {/*@ts-ignore*/}\n                <InputErrorMessageProvider errorMessage={errors.colorsArray?.message}>\n                  <InputGroup className={styles['form__colors-input-group']}>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Введите цвет\"\n                      aria-describedby=\"CarColors\"\n                      value={colorValue}\n                      ref={ref}\n                      onChange={(e) => setColorValue(e.target.value)}\n                      isInvalid={!!(errors.colorsArray)}\n                    />\n                    <Button\n                      variant=\"outline-primary\"\n                      className={styles['form__colors-add-button']}\n                      onClick={addColor}\n                      disabled={colorValue.length === 0}\n                    >\n                      Add Color\n                    </Button>\n                  </InputGroup>\n                </InputErrorMessageProvider>\n                <div className={styles['form__colors-checkbox']}>\n                  {colorsCheckboxes.map((color, index) => (\n                    <Form.Check\n                      type=\"checkbox\"\n                      label={color}\n                      key={`color-${index}`}\n                      onClick={() => deleteColor(color)}\n                      defaultChecked\n                    />\n                  ))}\n                </div>\n              </Form.Group>\n            </InputsContainer>\n          </div>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CarEdit;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\n\nconst CategoryEdit = (): React.ReactElement => {\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка категории</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка категории\">\n        <InputsContainer title=\"Настройки категории\">\n          <Form.Group controlId=\"categoryName\">\n            <Form.Label>Название категории</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите название\"\n                aria-describedby=\"categoryName\"\n              />\n            </div>\n          </Form.Group>\n          <Form.Group controlId=\"categoryDescription\">\n            <Form.Label>Описание</Form.Label>\n            <Form.Control\n              size=\"sm\"\n              as=\"textarea\"\n              rows={4}\n              aria-describedby=\"categoryDescription\"\n              defaultValue=\"Lorem ipsum dolor sit amet consectetur adipisicing elit. Odio eaque, quidem, commodi soluta qui quae quod dolorum sint alias, possimus illum assumenda eligendi cumque?\"\n            />\n          </Form.Group>\n        </InputsContainer>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CategoryEdit;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\n\nconst CityEdit = (): React.ReactElement => {\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка города</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка города\">\n        <InputsContainer title=\"Настройки города\">\n          <Form.Group controlId=\"cityName\">\n            <Form.Label>Название города</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите название\"\n                aria-describedby=\"cityName\"\n              />\n            </div>\n          </Form.Group>\n        </InputsContainer>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CityEdit;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\n\nconst OrderStatusEdit = (): React.ReactElement => {\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка статуса заказа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка статуса заказа\">\n        <InputsContainer title=\"Настройки статуса заказа\">\n          <Form.Group controlId=\"carName\">\n            <Form.Label>Название статуса</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите название\"\n                aria-describedby=\"carName\"\n              />\n            </div>\n          </Form.Group>\n        </InputsContainer>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default OrderStatusEdit;\n","import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { useCities } from '../../../Cities/hooks';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\n\nconst PointEdit = (): React.ReactElement => {\n  const [cities, citiesLoading] = useCities();\n  const [selectedCity, setSelectedCity] = useState<string>('Выберите город');\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка пункта выдачи</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка пункта выдачи\">\n        <InputsContainer title=\"Настройки пункта выдачи\">\n          <Form.Group controlId=\"pointName\">\n            <Form.Label>Название</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите название\"\n                aria-describedby=\"pointName\"\n              />\n            </div>\n          </Form.Group>\n          <Form.Group controlId=\"pointAddress\">\n            <Form.Label>Адрес</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите адрес\"\n                aria-describedby=\"pointAddress\"\n              />\n            </div>\n          </Form.Group>\n          <Form.Group controlId=\"pointCity\">\n            <Form.Label>Город</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Select\n                size=\"sm\"\n                value={selectedCity}\n                onChange={(e) => setSelectedCity(e.target.value)}\n                disabled={citiesLoading}\n                aria-describedby=\"pointCity\"\n              >\n                <option value=\"Выберите город\">Выберите город</option>\n                {cities && cities.map((city) => (\n                  <option key={city.id} value={city.id}>{city.name}</option>\n                ))}\n              </Form.Select>\n            </div>\n          </Form.Group>\n        </InputsContainer>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default PointEdit;\n","import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { useRateTypes } from '../../../RateTypes/hooks';\nimport checkPriceValue from '../../../../utils/helpers/OnlyNumberCheck';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\n\nconst RateEdit = (): React.ReactElement => {\n  const [rateTypes, loading] = useRateTypes();\n  const [selectedRateType, setSelectedRateType] = useState<string>('Выберите тип тарифа');\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка тарифа\">\n        <InputsContainer title=\"Настройки тарифа\">\n          <Form.Group controlId=\"carName\">\n            <Form.Label>Тип тарифа</Form.Label>\n            <Form.Select\n              size=\"sm\"\n              value={selectedRateType}\n              onChange={(e) => setSelectedRateType(e.target.value)}\n              disabled={loading}\n            >\n              <option value=\"Выберите тип тарифа\">Выберите тип</option>\n              {rateTypes && rateTypes.data.map((rateType) => (\n                <option key={rateType.id} value={rateType.id}>{`${rateType.name} - ${rateType.unit}`}</option>\n              ))}\n            </Form.Select>\n          </Form.Group>\n          <Form.Group controlId=\"ratePrice\">\n            <Form.Label>Цена, ₽</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите цену\"\n                aria-describedby=\"ratePrice\"\n                onKeyDown={(e) => checkPriceValue(e)}\n              />\n            </div>\n          </Form.Group>\n        </InputsContainer>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateEdit;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\n\nconst RateTypesEdit = (): React.ReactElement => {\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка типа тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка типа тарифа\">\n        <InputsContainer title=\"Настройки типа тарифа\">\n          <Form.Group controlId=\"rateTypeName\">\n            <Form.Label>Название типа тарифа</Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите название\"\n                aria-describedby=\"rateTypeName\"\n              />\n            </div>\n          </Form.Group>\n          <Form.Group controlId=\"rateTypeName\">\n            <Form.Label>Единица измерения. Например, <strong>7 дней</strong></Form.Label>\n            <div className=\"input-wrap\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Введите единицу измерения\"\n                aria-describedby=\"rateTypeName\"\n              />\n            </div>\n          </Form.Group>\n        </InputsContainer>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateTypesEdit;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/@teamsupercell/typings-for-css-modules-loader/src/index.js!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[10].use[2]!../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[10].use[3]!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[10].use[4]!./styles.module.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/@teamsupercell/typings-for-css-modules-loader/src/index.js!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[10].use[2]!../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[10].use[3]!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[10].use[4]!./styles.module.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/@teamsupercell/typings-for-css-modules-loader/src/index.js!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[10].use[2]!../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[10].use[3]!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[10].use[4]!./styles.module.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","__webpack_require__.h = () => (\"092cadf157380f3496e2\")"],"names":[],"sourceRoot":""}