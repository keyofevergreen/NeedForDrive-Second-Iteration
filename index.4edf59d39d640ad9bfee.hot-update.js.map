{"version":3,"file":"index.4edf59d39d640ad9bfee.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AC3EA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCar, fetchCars } from '../../../../store/Cars/thunks';\nimport { Dispatcher } from '../../../../types/store';\nimport { Car, CarsState } from '../../../../types/Cars';\nimport { CarForm } from '../../../../types/Edit';\n\nexport const useSaveCar = (form: CarForm | null, carId: string): [boolean] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { postCar, postLoading, postError } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n  const [body, setBody] = useState<object | null>(null);\n\n  useEffect(() => {\n    if (form) {\n      const formData = new FormData();\n      formData.append('name', form.name);\n      formData.append('description', form.description);\n      formData.append('priceMin', form.priceMin);\n      formData.append('priceMax', form.priceMax);\n      formData.append('number', form.number);\n      formData.append('thumbnail', form.thumbnail);\n      form.colors.forEach((color) => {\n        formData.append('colors', color);\n      });\n      formData.append('categoryId', form.categoryId);\n      setBody(formData);\n    }\n  }, [form]);\n\n  useEffect(() => {\n    if (body !== null) {\n      if (carId) {\n        console.log('hm');\n      } else {\n        dispatch(createCar(body));\n      }\n    }\n  }, [body]);\n\n  return [postLoading];\n};\n\nexport const useCarById = (carId: string, setValue: UseFormSetValue<CarForm>): [boolean, number] => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { cars, loading, error } = useSelector<{\n    cars: CarsState;\n  }, CarsState>((state) => state.cars);\n\n  useEffect(() => {\n    if (carId) {\n      dispatch(fetchCars({}, carId));\n    }\n  }, [carId]);\n\n  useEffect(() => {\n    if (cars && cars.data.length === 1) {\n      const car = cars.data[0];\n      setValue('name', car.name);\n      setValue('categoryId', car?.categoryId?.id);\n      setValue('description', car.description);\n      setValue('colors', car.colors);\n      setValue('name', car.name);\n      const blob = fetch(car.thumbnail.path)\n        .then((r) => r.blob())\n        .then((imageBlob) => {\n          const carImage = new File([imageBlob], car.thumbnail.originalname);\n          setValue('thumbnail', carImage);\n        });\n    }\n  }, [cars]);\n\n  return [loading, error];\n};\n","__webpack_require__.h = () => (\"f33c13453c7ff7f86666\")"],"names":[],"sourceRoot":""}