{"version":3,"file":"index.7c1dd7eeaf7bc4c0d293.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAQA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtEA","sources":["webpack://NeedForDrive-Second-Iteration/./src/store/OrderStatus/thunks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { ThunkResult } from '../../types/thunk';\nimport {\n  requestOrderStatus,\n  requestOrderStatusError,\n  requestOrderStatuses,\n  requestOrderStatusesError,\n  requestOrderStatusesSuccess,\n  requestOrderStatusSuccess,\n} from './actions';\nimport { addSuccessAlert, addToErrorHandler } from '../ErrorProvider/actions';\nimport { uploadEntity, uploadEntityError, uploadEntitySuccess } from '../Edit/actions';\n\nexport const fetchOrderStatuses = (): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatuses());\n    const { data } = await services.table.getEntities('orderStatus', {});\n    dispatch(requestOrderStatusesSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusesError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const fetchOrderStatus = (orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(requestOrderStatus());\n    const { data } = await services.table.getEntities('orderStatus', {}, orderStatusId);\n    dispatch(requestOrderStatusSuccess(data.data));\n  } catch (error) {\n    dispatch(requestOrderStatusError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const createOrderStatus = (newOrderStatus: OrderStatusForm): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(uploadEntity());\n    const { data } = await services.table.postEntity('orderStatus', newOrderStatus);\n    dispatch(uploadEntitySuccess(data.data));\n    dispatch(addSuccessAlert('Статус заказа создан'));\n  } catch (error) {\n    dispatch(uploadEntityError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const editOrderStatus = (newOrderStatus: OrderStatusForm, orderStatusId: string): ThunkResult => async (dispatch, getState, { services }) => {\n  try {\n    dispatch(uploadEntity());\n    const { data } = await services.table.putEntity('orderStatus', newOrderStatus, orderStatusId);\n    dispatch(uploadEntitySuccess(data.data));\n    dispatch(addSuccessAlert('Статус заказа сохранен'));\n  } catch (error) {\n    dispatch(uploadEntityError(error.response.status));\n    dispatch(addToErrorHandler(error.response.status));\n  }\n};\n\nexport const deleteOrderStatus = (orderStatusId: string): ThunkResult => {\n  return async (dispatch, getState, { services }) => {\n    try {\n      dispatch(uploadEntity());\n      const { data } = await services.table.deleteEntity('orderStatus', orderStatusId);\n      dispatch(uploadEntitySuccess(data.data));\n      dispatch(addSuccessAlert('Статус заказа удален'));\n    } catch (error) {\n      dispatch(uploadEntityError(error.response.status));\n      dispatch(addToErrorHandler(error.response.status));\n    }\n  };\n};\n","__webpack_require__.h = () => (\"319e364cc3c19101e520\")"],"names":[],"sourceRoot":""}