{"version":3,"file":"index.4349d254d628d77171d7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAJA;AASA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAJA;AAQA;AAAA;AAAA;AAAA;AATA;AAWA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAFA;AA1BA;AAqCA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AAYA;AACA;AAFA;AAAA;AAZA;AAFA;AAuBA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AAIA;AATA;AAWA;AAAA;AAAA;AAEA;AAAA;AAAA;AAbA;AAkBA;AACA;AAFA;AAAA;AAlBA;AAFA;AA6BA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AANA;AADA;AAYA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAXA;AAdA;AA1DA;AArCA;AAJA;AANA;AA8IA;;AAEA;;;;;;;;AC3KA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/CarEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { Button, Form, InputGroup, ProgressBar } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { CarEditForm } from '../../../../types/Edit';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormContainer from '../../../../components/FormContainer/FormContainer';\nimport Car from '../../../../assets/carsDefaultImage.png';\nimport styles from './styles.module.scss';\nimport { useCategory } from '../../../Categories/hooks';\n\nconst CarEdit = (): React.ReactElement => {\n  const { carId } = useParams();\n  const [categories, categoriesLoading] = useCategory();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<CarEditForm>({\n    defaultValues: {\n      carName: '',\n      categoryName: 'Выберите категорию',\n    }\n  });\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка автомобиля</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Карточка автомобиля\"\n        className={styles['car-edit-container-wrap']}\n      >\n        <div className={styles['car-edit']}>\n          <div className={styles['car-edit__card']}>\n            <img src={Car} alt=\"car-name\" />\n            <div className={styles['car-edit__details']}>\n              <h2>\n                Тачка\n              </h2>\n              <span>\n                Компакт-кар\n              </span>\n            </div>\n            <Form.Control\n              type=\"file\"\n              size=\"sm\"\n              className={styles['car-edit__file-input']}\n            />\n            <div className={styles['car-edit__progress-wrap']}>\n              <div className={styles['car-edit__progress-details']}>\n                <span>\n                  Заполнено\n                </span>\n                <span>\n                  75%\n                </span>\n              </div>\n              <ProgressBar now={75} className={styles['car-edit__progress']} animated />\n            </div>\n            <Form.Group className={styles['car-edit__description-textarea']} controlId=\"carDescription\">\n              <Form.Label>Описание</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={4}\n                aria-describedby=\"carDescription\"\n                defaultValue=\"Lorem ipsum dolor sit amet consectetur adipisicing elit. Odio eaque, quidem, commodi soluta qui quae quod dolorum sint alias, possimus illum assumenda eligendi cumque?\"\n              />\n            </Form.Group>\n          </div>\n          <FormContainer\n            title=\"Настройки автомобиля\"\n            isCreateTable={!carId}\n            className={styles['car-form-container']}\n            noValidate\n          >\n            <Form.Group controlId=\"carName\">\n              <Form.Label>Модель автомобиля</Form.Label>\n              <div className=\"input-wrap\">\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите модель\"\n                  aria-describedby=\"carName\"\n                  autocomplete=\"off\"\n                  {...register('carName', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.carName)}\n                />\n                {(errors.carName?.message) && (\n                  <Form.Text\n                    id=\"username\"\n                    bsPrefix=\"input-message\"\n                  >\n                    {errors.carName?.message}\n                  </Form.Text>\n                )}\n              </div>\n            </Form.Group>\n            <Form.Group controlId=\"categoryName\">\n              <Form.Label>Тип автомобиля</Form.Label>\n              <div className=\"input-wrap\">\n                <Form.Select\n                  size=\"sm\"\n                  autocomplete=\"off\"\n                  disabled={categoriesLoading}\n                  aria-describedby=\"pointCity\"\n                  {...register('categoryName', {\n                    required: 'Это поле не должно быть пустым',\n                    validate: value => value !== 'Выберите категорию' || 'Вы не выбрали категорию',\n                  })}\n                  isInvalid={!!(errors.categoryName)}\n                >\n                  <option value=\"Выберите категорию\">Выберите категорию</option>\n                  {categories && categories.map((category) => (\n                    <option key={category.id} value={category.id}>{category.name}</option>\n                  ))}\n                </Form.Select>\n                {(errors.carName?.message) && (\n                  <Form.Text\n                    id=\"username\"\n                    bsPrefix=\"input-message\"\n                  >\n                    {errors.carName?.message}\n                  </Form.Text>\n                )}\n              </div>\n            </Form.Group>\n            <Form.Group controlId=\"CarColors\">\n              <Form.Label>Доступные цвета</Form.Label>\n              <div className=\"input-wrap\">\n                <InputGroup className={styles['form__colors-input-group']}>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите цвет\"\n                    aria-describedby=\"CarColors\"\n                  />\n                  <Button variant=\"outline-primary\" className={styles['form__colors-add-button']}>\n                    Add Color\n                  </Button>\n                </InputGroup>\n              </div>\n              <div className={styles['form__colors-checkbox']}>\n                <Form.Check\n                  type=\"checkbox\"\n                  label=\"Красный\"\n                  defaultChecked\n                />\n                <Form.Check\n                  type=\"checkbox\"\n                  label=\"Зеленый\"\n                  defaultChecked\n                />\n                <Form.Check\n                  type=\"checkbox\"\n                  label=\"Легендарный\"\n                  defaultChecked\n                />\n              </div>\n            </Form.Group>\n          </FormContainer>\n        </div>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CarEdit;\n","__webpack_require__.h = () => (\"478e5ed7b17d67c43b11\")"],"names":[],"sourceRoot":""}