{"version":3,"file":"index.fb8431fec1fd7f703f3c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;AAIA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClDA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/OrderStatusEdit/hooks.ts","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UseFormSetValue } from 'react-hook-form/dist/types/form';\nimport { Dispatcher } from '../../../../types/store';\nimport { OrderStatusForm, OrderStatusState } from '../../../../types/OrderStatus';\nimport { fetchOrderStatus } from '../../../../store/OrderStatus/thunks';\nimport { clearUploadedOrderStatusData } from '../../../../store/OrderStatus/actions';\nimport { useNavigate } from 'react-router-dom';\n\nexport const useOrderStatusById = (orderStatusId: string, setValue: UseFormSetValue<OrderStatusForm>): boolean => {\n  const dispatch = useDispatch<Dispatcher>();\n  const { orderStatusById, orderStatusByIdLoading, orderStatusByIdError } = useSelector<{\n    orderStatus: OrderStatusState;\n  }, OrderStatusState>((state) => state.orderStatus);\n\n  const setValuesToForm = async (orderStatus): Promise<void> => {\n    setValue('name', orderStatus.name, { shouldDirty: true });\n    console.log(orderStatus);\n  };\n\n  useEffect(() => {\n    if (orderStatusId) {\n      dispatch(fetchOrderStatus(orderStatusId));\n    }\n  }, [orderStatusId]);\n\n  useEffect(() => {\n    if (orderStatusById && orderStatusId) {\n      setValuesToForm(orderStatusById);\n    }\n  }, [orderStatusById]);\n\n  return orderStatusByIdLoading;\n};\n\ninterface IUseUpload {\n  entityId: string | null,\n  uploadedEntity: object,\n  path: string,\n}\n\nexport const useUploadedEntity: IUseUpload = ({ entityId, uploadedEntity, path }): void => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  useEffect(() => {\n    if (uploadedEntity && !entityId) {\n      navigate(`/edit/${path}`);\n      dispatch(clearUploadedOrderStatusData());\n    }\n  }, [uploadedEntity]);\n};\n","__webpack_require__.h = () => (\"b6700d908691220dc2dc\")"],"names":[],"sourceRoot":""}