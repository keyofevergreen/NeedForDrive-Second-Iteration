{"version":3,"file":"index.8b6705f1ed5668136ecb.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AADA;AAgBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AADA;AAgBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AASA;AAAA;AAAA;AAEA;AAAA;AAAA;AAXA;AADA;AAFA;AADA;AAjCA;AARA;AADA;AANA;AA0EA;;AAEA;;;;;;;;AC9GA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/PointEdit/PointEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport { useCities } from '../../../Cities/hooks';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport { Dispatcher } from '../../../../types/store';\nimport { PointForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\n\nconst PointEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { pointId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<PointForm>({\n    defaultValues: {\n      name: '',\n      address: '',\n      cityId: 'Выберите город',\n    }\n  });\n  const [cities, citiesLoading] = useCities();\n  const pointUploading = useUploadedEntity(pointId, 'point');\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка пункта выдачи</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка пункта выдачи\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            console.log(data);\n          })}\n        >\n\n          <InputsContainer title=\"Настройки пункта выдачи\">\n            <InputErrorMessageProvider errorMessage={errors.name?.message}>\n              <Form.Group controlId=\"pointName\">\n                <Form.Label>Название</Form.Label>\n                <div className=\"input-wrap\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите название\"\n                    aria-describedby=\"pointName\"\n                    {...register('name', {\n                      required: 'Это поле не должно быть пустым'\n                    })}\n                    isInvalid={!!(errors.name)}\n                  />\n                </div>\n              </Form.Group>\n            </InputErrorMessageProvider>\n            <InputErrorMessageProvider errorMessage={errors.address?.message}>\n              <Form.Group controlId=\"pointAddress\">\n                <Form.Label>Адрес</Form.Label>\n                <div className=\"input-wrap\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите адрес\"\n                    aria-describedby=\"pointAddress\"\n                    {...register('address', {\n                      required: 'Это поле не должно быть пустым'\n                    })}\n                    isInvalid={!!(errors.address)}\n                  />\n                </div>\n              </Form.Group>\n            </InputErrorMessageProvider>\n            <InputErrorMessageProvider errorMessage={errors.cityId?.message}>\n              <Form.Group controlId=\"pointsCity\">\n                <Form.Label>Город</Form.Label>\n                <div className=\"input-wrap\">\n                  <Form.Select\n                    size=\"sm\"\n                    disabled={citiesLoading}\n                    aria-describedby=\"pointsCity\"\n                    {...register('cityId', {\n                      required: 'Это поле не должно быть пустым'\n                    })}\n                    isInvalid={!!(errors.cityId)}\n                  >\n                    <option value=\"Выберите город\">Выберите город</option>\n                    {cities && cities.map((city) => (\n                      <option key={city.id} value={city.id}>{city.name}</option>\n                    ))}\n                  </Form.Select>\n                </div>\n              </Form.Group>\n            </InputErrorMessageProvider>\n          </InputsContainer>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default PointEdit;\n","__webpack_require__.h = () => (\"51a370c2e3fa9101afac\")"],"names":[],"sourceRoot":""}