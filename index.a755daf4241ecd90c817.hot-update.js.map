{"version":3,"file":"index.a755daf4241ecd90c817.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AAGA;AAAA;AAJA;AAQA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAIA;AADA;AAGA;AANA;AADA;AADA;AAaA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AARA;AADA;AAFA;AAnCA;AADA;AAsDA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AADA;AAFA;AAoBA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAJA;AAAA;AAVA;AADA;AAqBA;AAAA;AAGA;AACA;AAEA;AACA;AALA;AAFA;AAxBA;AAxCA;AAtDA;AAPA;AAJA;AANA;AAyJA;;AAEA;;;;;;;;;;;;;;;;;;AC9NA;AACA;AAEA;;;;AAaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAJA;AAQA;AAAA;AAAA;AATA;AAYA;;AAEA;;;;;;;;;;;;;;;;;;;;ACtsources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/CarEdit.tsx","webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/components/MyProgressBar/MyProgressBar.tsx","webpack://NeedForDrive-Second-Iteration/./node_modules/react-bootstrap/esm/ProgressBar.js","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { CarForm } from '../../../../types/Edit';\nimport { useCategory } from '../../../Categories/hooks';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport styles from './styles.module.scss';\nimport { useSaveCar } from './hooks';\nimport { imageOnErrorHandler } from '../../../../utils/helpers/imageOnErrorHandler';\nimport MyProgressBar from './components/MyProgressBar/MyProgressBar';\n\nconst CarEdit = (): React.ReactElement => {\n  const { carId } = useParams();\n  const [colorValue, setColorValue] = useState<string>('');\n  const [categories, categoriesLoading] = useCategory();\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [form, setForm] = useState<CarForm | null>(null);\n  const [response, responseLoading] = useSaveCar(form, !!carId);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    getFieldState,\n    formState: { errors },\n    formState\n  } = useForm<CarForm>({\n    defaultValues: {\n      name: '',\n      categoryId: 'Выберите категорию',\n      description: '',\n      colors: [],\n      thumbnail: null,\n    }\n  });\n  const { ref } = register('colors', {\n    validate: (value) => value.length > 0 || 'Добавьте хотя бы один цвет',\n  });\n  const currentCar = watch('name');\n  const currentImage = watch('thumbnail');\n  const currentCategory = watch('categoryId');\n  const colorsCheckboxes = watch('colors');\n\n  useEffect(() => {\n    if (categories) {\n      const currCategoryObject = categories.find((c) => c.id === currentCategory);\n      setSelectedCategory(currCategoryObject?.name);\n    }\n  }, [currentCategory]);\n\n  const addColor = (): void => {\n    const currentColors = getValues('colors');\n    setValue('colors', [...currentColors, colorValue], { shouldValidate: true, shouldDirty: true });\n    setColorValue('');\n  };\n\n  const deleteColor = (colorForDelete): void => {\n    const currentColors = getValues('colors');\n    setValue('colors', currentColors.filter((color) => color !== colorForDelete), { shouldDirty: true });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка автомобиля</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Карточка автомобиля\"\n        className={styles['car-edit-container-wrap']}\n      >\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            setForm(data);\n          })}\n        >\n          <div className={styles['car-edit']}>\n            <div className={styles['car-edit']}>\n              <div className={styles['car-edit__card']}>\n                <img\n                  src={currentImage && currentImage.length > 0 ? URL.createObjectURL(currentImage[0]) : ''}\n                  alt=\"car-name\"\n                  onError={imageOnErrorHandler}\n                />\n                <div className={styles['car-edit__details']}>\n                  <h2>\n                    {currentCar}\n                  </h2>\n                  <span>\n            {selectedCategory && selectedCategory.length > 0 ? selectedCategory : 'Категория не выбрана'}\n          </span>\n                </div>\n                <div className={styles['car-edit__file-input-container']}>\n                  <InputErrorMessageProvider errorMessage={errors.thumbnail?.message}>\n                    <Form.Control\n                      type=\"file\"\n                      accept=\"image/png, image/jpeg\"\n                      {...register('thumbnail', {\n                        required: 'Выберите изображение автомобиля',\n                      })}\n                      isInvalid={!!(errors.thumbnail)}\n                    />\n                  </InputErrorMessageProvider>\n                </div>\n                <MyProgressBar\n                  formStates={[\n                    getFieldState('name', formState),\n                    getFieldState('categoryId', formState),\n                    getFieldState('colors', formState),\n                    getFieldState('thumbnail', formState),\n                    getFieldState('description', formState),\n                  ]}\n                />\n                <Form.Group className={styles['car-edit__description-textarea']} controlId=\"carDescription\">\n                  <Form.Label>Описание</Form.Label>\n                  <InputErrorMessageProvider errorMessage={errors.description?.message}>\n                    <Form.Control\n                      as=\"textarea\"\n                      rows={4}\n                      aria-describedby=\"carDescription\"\n                      placeholder=\"Введите описание\"\n                      {...register('description', {\n                        required: 'Это поле не должно быть пустым',\n                      })}\n                      isInvalid={!!(errors.description)}\n                    />\n                  </InputErrorMessageProvider>\n                </Form.Group>\n              </div>\n            </div>\n            <InputsContainer\n              title=\"Настройки автомобиля\"\n              isCreateTable={!carId}\n              isLoading={responseLoading}\n              className={styles['car-form-container']}\n            >\n              <Form.Group controlId=\"carName\">\n                <Form.Label>Модель автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите модель\"\n                    aria-describedby=\"carName\"\n                    {...register('name', {\n                      required: 'Это поле не должно быть пустым'\n                    })}\n                    isInvalid={!!(errors.name)}\n                  />\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"categoryName\">\n                <Form.Label>Тип автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.categoryId?.message}>\n                  <Form.Select\n                    size=\"sm\"\n                    disabled={categoriesLoading}\n                    aria-describedby=\"categoryName\"\n                    {...register('categoryId', {\n                      required: 'Это поле не должно быть пустым',\n                      validate: value => value !== 'Выберите категорию' || 'Вы не выбрали категорию',\n                    })}\n                    isInvalid={!!(errors.categoryId)}\n                  >\n                    <option value=\"Выберите категорию\">Выберите категорию</option>\n                    {categories && categories.map((category) => (\n                      <option key={category.id} value={category.id}>{category.name}</option>\n                    ))}\n                  </Form.Select>\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"CarColors\">\n                <Form.Label>Доступные цвета</Form.Label>\n                {/*@ts-ignore*/}\n                <InputErrorMessageProvider errorMessage={errors.colors?.message}>\n                  <InputGroup className={styles['form__colors-input-group']}>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Введите цвет\"\n                      aria-describedby=\"CarColors\"\n                      value={colorValue}\n                      ref={ref}\n                      onChange={(e) => setColorValue(e.target.value)}\n                      isInvalid={!!(errors.colors)}\n                    />\n                    <Button\n                      variant=\"outline-primary\"\n                      className={styles['form__colors-add-button']}\n                      onClick={addColor}\n                      disabled={colorValue.length === 0}\n                    >\n                      Add Color\n                    </Button>\n                  </InputGroup>\n                </InputErrorMessageProvider>\n                <div className={styles['form__colors-checkbox']}>\n                  {colorsCheckboxes.map((color, index) => (\n                    <Form.Check\n                      type=\"checkbox\"\n                      label={color}\n                      key={`color-${index}`}\n                      onClick={() => deleteColor(color)}\n                      defaultChecked\n                    />\n                  ))}\n                </div>\n              </Form.Group>\n            </InputsContainer>\n          </div>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CarEdit;\n","import React, { useEffect, useState } from 'react';\nimport { ProgressBar } from 'react-bootstrap';\nimport { FieldError } from 'react-hook-form';\nimport styles from '../../styles.module.scss';\n\ninterface IMyProgressBar {\n  formStates: FormState[];\n}\n\nexport type FormState = {\n  isDirty: boolean,\n  isTouched: boolean,\n  invalid: boolean,\n  error?: undefined | FieldError,\n};\n\nconst MyProgressBar = ({ formStates }: IMyProgressBar): React.ReactElement => {\n  const [progress, setProgress] = useState<number>(0);\n  useEffect(() => {\n    const readyStates = formStates.filter((state) => !state.invalid && state.isDirty);\n    setProgress((Math.floor((readyStates.length / formStates.length) * 100)));\n  }, [formStates]);\n\n  return (\n    <div className={styles['car-edit__progress-wrap']}>\n      <div className={styles['car-edit__progress-details']}>\n        <span>\n          Заполнено\n        </span>\n        <span>\n          {`${progress}%`}\n        </span>\n      </div>\n      <ProgressBar now={progress} className={styles['car-edit__progress']} />\n    </div>\n  );\n};\n\nexport default MyProgressBar;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  visuallyHidden: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild,\n  ...props\n}, ref) => {\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","__webpack_require__.h = () => (\"d1293e3cc8b25f085536\")"],"names":[],"sourceRoot":""}