{"version":3,"file":"index.df4bb0f9d7432c6afa36.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAcA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AArBA;AAPA;AADA;AANA;AAsDA;;AAEA;;;;;;;;ACvGA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/RateTypesEdit/RateTypesEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Form } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport FormBody from '../../../../components/FormBody/FormBody';\nimport { Dispatcher } from '../../../../types/store';\nimport { RateTypeForm } from '../../../../types/Edit';\nimport { useUploadedEntity } from '../../../../utils/helpers/hooks';\nimport { useRateTypeById } from './hooks';\nimport { createEntity, deleteEntity, editEntity } from '../../../../store/Edit/thunks';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\n\nconst RateTypesEdit = (): React.ReactElement => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch<Dispatcher>();\n  const { rateTypeId } = useParams();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<RateTypeForm>({\n    defaultValues: {\n      name: '',\n      unit: '',\n    }\n  });\n  const rateTypeUploading = useUploadedEntity(rateTypeId, 'rate-types');\n  const fetchRateTypeLoading = useRateTypeById(rateTypeId, setValue);\n\n  const onSubmit = async (data: RateTypeForm): Promise<void> => {\n    if (rateTypeId) {\n      dispatch(editEntity(data, 'rateType', rateTypeId, 'Тип тарифа сохранен'));\n    } else dispatch(createEntity(data, 'rateType', 'Тип тарифа создан'));\n  };\n\n  const onDeleteRateType = (): void => {\n    if (rateTypeId) {\n      dispatch(deleteEntity('rateType', rateTypeId, 'Тип тарифа удален'));\n      navigate('/order-status');\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка типа тарифа</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer title=\"Карточка типа тарифа\">\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            onSubmit(data);\n          })}\n        >\n          <FormBody\n            title=\"Настройки типа тарифа\"\n            isCreateTable={!rateTypeId}\n            isSubmitting={rateTypeUploading}\n            isLoading={fetchRateTypeLoading}\n            onDelete={onDeleteRateType}\n          >\n            <Form.Group controlId=\"rateTypeName\">\n              <Form.Label>Название типа тарифа</Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.name?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите название\"\n                  aria-describedby=\"rateTypeName\"\n                  {...register('name', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.name)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n            <Form.Group controlId=\"rateTypeName\">\n              <Form.Label>Единица измерения. Например, <strong>7 дней</strong></Form.Label>\n              <InputErrorMessageProvider errorMessage={errors.unit?.message}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Введите единицу измерения\"\n                  aria-describedby=\"rateTypeName\"\n                  {...register('unit', {\n                    required: 'Это поле не должно быть пустым'\n                  })}\n                  isInvalid={!!(errors.unit)}\n                />\n              </InputErrorMessageProvider>\n            </Form.Group>\n          </FormBody>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default RateTypesEdit;\n","__webpack_require__.h = () => (\"3ce7520083f95faf15a8\")"],"names":[],"sourceRoot":""}