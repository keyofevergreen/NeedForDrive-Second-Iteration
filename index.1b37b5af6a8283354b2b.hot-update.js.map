{"version":3,"file":"index.1b37b5af6a8283354b2b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AAZA;AAqBA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AADA;AAGA;AAPA;AADA;AAFA;AAcA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAZA;AADA;AAFA;AAoBA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAJA;AAAA;AAVA;AADA;AAqBA;AAAA;AAGA;AACA;AAEA;AACA;AALA;AAFA;AAxBA;AAvCA;AArBA;AAPA;AAJA;AANA;AAuHA;;AAEA;;;;;;;;ACpMA","sources":["webpack://NeedForDrive-Second-Iteration/./src/pages/Edit/components/CarEdit/CarEdit.tsx","webpack://NeedForDrive-Second-Iteration/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Form, InputGroup } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { CarEditForm } from '../../../../types/Edit';\nimport { useCategory } from '../../../Categories/hooks';\nimport CarCard from './components/CarCard/CarCard';\nimport ContentContainer from '../../../../components/ContentContainer/ContentContainer';\nimport InputsContainer from '../../../../components/InputsContainer/InputsContainer';\nimport InputErrorMessageProvider from '../../../../components/InputErrorMessageProvider/InputErrorMessageProvider';\nimport styles from './styles.module.scss';\n\nconst CarEdit = (): React.ReactElement => {\n  const { carId } = useParams();\n  const [colorValue, setColorValue] = useState<string>('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [categories, categoriesLoading] = useCategory();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    getFieldState,\n    formState: { errors },\n    formState,\n  } = useForm<CarEditForm>({\n    defaultValues: {\n      car: '',\n      category: 'Выберите категорию',\n      description: '',\n      colorsArray: [],\n      image: null,\n    }\n  });\n  const { ref } = register('colorsArray', {\n    validate: (value) => value.length > 0 || 'Добавьте хотя бы один цвет',\n  });\n  const currentCar = watch('car');\n  const currentImage = watch('image');\n  const currentCategory = watch('category');\n  const colorsCheckboxes = watch('colorsArray');\n\n  useEffect(() => {\n    if (categories) {\n      const currCategoryObject = categories.find((category) => category.id === currentCategory);\n      setSelectedCategory(currCategoryObject?.name);\n    }\n  }, [currentCategory]);\n\n  const addColor = (): void => {\n    const currentColors = getValues('colorsArray');\n    setValue('colorsArray', [...currentColors, colorValue], { shouldValidate: true, shouldDirty: true });\n    setColorValue('');\n  };\n\n  const deleteColor = (colorForDelete): void => {\n    const currentColors = getValues('colorsArray');\n    setValue('colorsArray', currentColors.filter((color) => color !== colorForDelete), { shouldDirty: true });\n  };\n\n  const imageUploadHandler = (e): void => {\n    const selectedImg = e.target.files[0];\n    if (selectedImg) {\n      setValue('image', selectedImg, { shouldDirty: true });\n    }\n  };\n\n  useEffect(() => {\n    console.log(currentImage);\n  }, [currentImage]);\n\n  // @ts-ignore\n  return (\n    <>\n      <Helmet>\n        <title>Need For Drive - Карточка автомобиля</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <meta name=\"description\" content=\"Home page\" />\n      </Helmet>\n      <ContentContainer\n        title=\"Карточка автомобиля\"\n        className={styles['car-edit-container-wrap']}\n      >\n        <Form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit((data) => {\n            console.log(data);\n          })}\n        >\n          <div className={styles['car-edit']}>\n            <CarCard\n              image={currentImage}\n              carName={currentCar}\n              category={selectedCategory}\n              descriptionError={errors.description?.message}\n              descriptionRegister={register('description', {\n                required: 'Это поле не должно быть пустым',\n              })}\n              imageError={errors.image?.message}\n              imageRegister={register('image', {\n                required: 'Выберите изображение автомобиля',\n              })}\n              progressBarFields={[\n                getFieldState('car', formState),\n                getFieldState('category', formState),\n                getFieldState('colorsArray', formState),\n                getFieldState('image', formState),\n                getFieldState('description', formState),\n              ]}\n            />\n            <InputsContainer\n              title=\"Настройки автомобиля\"\n              isCreateTable={!carId}\n              className={styles['car-form-container']}\n            >\n              <Form.Group controlId=\"carName\">\n                <Form.Label>Модель автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.car?.message}>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Введите модель\"\n                    aria-describedby=\"carName\"\n                    {...register('car', {\n                      required: 'Это поле не должно быть пустым'\n                    })}\n                    isInvalid={!!(errors.car)}\n                  />\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"categoryName\">\n                <Form.Label>Тип автомобиля</Form.Label>\n                <InputErrorMessageProvider errorMessage={errors.category?.message}>\n                  <Form.Select\n                    size=\"sm\"\n                    disabled={categoriesLoading}\n                    aria-describedby=\"pointCity\"\n                    {...register('category', {\n                      required: 'Это поле не должно быть пустым',\n                      validate: value => value !== 'Выберите категорию' || 'Вы не выбрали категорию',\n                    })}\n                    isInvalid={!!(errors.category)}\n                  >\n                    <option value=\"Выберите категорию\">Выберите категорию</option>\n                    {categories && categories.map((category) => (\n                      <option key={category.id} value={category.id}>{category.name}</option>\n                    ))}\n                  </Form.Select>\n                </InputErrorMessageProvider>\n              </Form.Group>\n              <Form.Group controlId=\"CarColors\">\n                <Form.Label>Доступные цвета</Form.Label>\n                {/*@ts-ignore*/}\n                <InputErrorMessageProvider errorMessage={errors.colorsArray?.message}>\n                  <InputGroup className={styles['form__colors-input-group']}>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Введите цвет\"\n                      aria-describedby=\"CarColors\"\n                      value={colorValue}\n                      ref={ref}\n                      onChange={(e) => setColorValue(e.target.value)}\n                      isInvalid={!!(errors.colorsArray)}\n                    />\n                    <Button\n                      variant=\"outline-primary\"\n                      className={styles['form__colors-add-button']}\n                      onClick={addColor}\n                      disabled={colorValue.length === 0}\n                    >\n                      Add Color\n                    </Button>\n                  </InputGroup>\n                </InputErrorMessageProvider>\n                <div className={styles['form__colors-checkbox']}>\n                  {colorsCheckboxes.map((color, index) => (\n                    <Form.Check\n                      type=\"checkbox\"\n                      label={color}\n                      key={`color-${index}`}\n                      onClick={() => deleteColor(color)}\n                      defaultChecked\n                    />\n                  ))}\n                </div>\n              </Form.Group>\n            </InputsContainer>\n          </div>\n        </Form>\n      </ContentContainer>\n    </>\n  );\n};\n\nexport default CarEdit;\n","__webpack_require__.h = () => (\"2f95fb6896ba85f52168\")"],"names":[],"sourceRoot":""}